Script started on 2020-02-12 14:19:51-05:00 [TERM="screen" TTY="/dev/pts/3" COLUMNS="172" LINES="82"]
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01\[davidreidsma@localhost proj01]$ cd ada
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/ada\[davidreidsma@localhost ada]$ ls
[0m[01;32mrectangle_area[0m  rectangle_area.adb  rectangle_area.ali  rectangle_area.o
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/ada\[davidreidsma@localhost ada]$ cat rectangle_area.adb
-- rectangle_area.adb computes the area of a rectangle.
--
-- Input: The width and length of a rectangle.
-- Precondition: The width and length are positive numbers.
-- Output: The area of the rectangle.
--
-- Author: David Reidsma
-- Date: 11/02/2020
----------------------------------------------------

with Ada.Text_IO, Ada.Float_Text_IO;
use Ada.Text_IO, Ada.Float_Text_IO;

procedure rectangle_area is
	width, length, area : float;

	-- function rectangleArea computes a rectangle's area, given a width and length
	-- Parameter: width, a float; must be greater than 0
	-- Parameter: length, a float; must be greater than 0
	-- Return: the area of the rectangle whose sides are of lengths width and length
	----------------------------------------------------
	function rectangleArea(width: in float; length: in float) return float is
	begin
		return width * length;
	end rectangleArea;

begin
	New_Line;
	Put_Line("To compute the area of a rectangle,");

	Put(" enter a width: ");
	Get(width);
	Put(" enter a length: ");
	Get(length);

	area := rectangleArea(width, length);

	New_Line;
	Put("The area is ");
	Put(area, 1, 15, 0);
	New_Line;
end rectangle_area;
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/ada\[davidreidsma@localhost ada]$ gnatmake rectangle_area
gnatmake: "rectangle_area" up to date.
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/ada\[davidreidsma@localhost ada]$ ./rectangle_area

To compute the area of a rectangle,
 enter a width: 2
 enter a length: 2

The area is 4.000000000000000
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/ada\[davidreidsma@localhost ada]$ ./rectangle_area

To compute the area of a rectangle,
 enter a width: 4
 enter a length: 5

The area is 20.000000000000000
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/ada\[davidreidsma@localhost ada]$ cd ..
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01\[davidreidsma@localhost proj01]$ exit

Script done on 2020-02-12 14:20:27-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2020-02-12 14:20:32-05:00 [TERM="screen" TTY="/dev/pts/3" COLUMNS="172" LINES="82"]
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01\[davidreidsma@localhost proj01]$ cd clojure
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/clojure\[davidreidsma@localhost clojure]$ ls
[0m[01;34msrc[0m
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/clojure\[davidreidsma@localhost clojure]$ ls src
rectangle_area.clj
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/clojure\[davidreidsma@localhost clojure]$ cat sc[Krc/rectangle_area.clj 
;;;;
;;;; Usage: clojure -m rectangle_area
;;;;
;;;; Author: David Reidsma
;;;; Date: 11/02/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns rectangle_area)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function rectangleArea() computes the area of a rectangle.
;;; Receive: width, a number; must be greater than 0
;;; Receive: length, a number; must be greater than 0
;;; Return: the area of the corresponding rectangle.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn rectangleArea [width, length]
  (* width length)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Function main is where execution begins
;;; Input: the width and length of a rectangle.
;;; Output: the area of that rectangle.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (println "\nTo compute the area of a rectangle,")

  (print " enter its width: ") (flush)
  (let
    [ width (read) ]
    (assert (> width 0) "-main: width must be positive")

    (print " enter its length: ") (flush)
    (let
      [ length (read) ]
      (assert (> length 0) "-main: length must be positive")

      (printf "\nThe area is %.15f\n" (float (* width length)))
    )
  )
)
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/clojure\[davidreidsma@localhost clojure]$ clojure rectangle_area

To compute the area of a rectangle,
 enter its width: 2
 enter its length: 2

The area is 4.000000000000000
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/clojure\[davidreidsma@localhost clojure]$ clojure -m rectangle_area

To compute the area of a rectangle,
 enter its width: 4
 enter its length: 5

The area is 20.000000000000000
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/clojure\[davidreidsma@localhost clojure]$ cd ..
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01\[davidreidsma@localhost proj01]$ exit

Script done on 2020-02-12 14:21:59-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2020-02-12 14:17:31-05:00 [TERM="screen" TTY="/dev/pts/3" COLUMNS="172" LINES="82"]
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01\[davidreidsma@localhost proj01]$ cd java
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/java\[davidreidsma@localhost java]$ ls
RectangleArea.class  RectangleArea.java
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/java\[davidreidsma@localhost java]$ cat RectangleArea.java
/**
 * RectangleArea.java computes the area of a rectangle.
 *
 * Input: The width and length of a rectangle.
 * Precondition: The width and length are positive numbers.
 * Output: The area of the rectangle.
 *
 * Author: David Reidsma
 * Date: 11/02/2020
 **********************************************************/

import java.util.Scanner;

public class RectangleArea {
	/**
	 * Returns the area of a rectangle.
	 * @param width	The width of the rectangle. Must be positive.
	 * @param length The length of the rectangle. Must be greater than one.
	 * @return The area of the rectangle.
	 */
	private static double rectangleArea(double width, double length) {
		return width * length;
	}

	public static void main(String[] args) {
		System.out.println("\nTo compute the area of a rectangle,");
		
		Scanner scanner = new Scanner(System.in);
		
		System.out.print(" enter a width: ");
		double width = scanner.nextDouble();

		System.out.print(" enter a length: ");
		double length = scanner.nextDouble();

		double area = rectangleArea(width, length);
		System.out.println("\nThe area is " + area);
	}
}
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/java\[davidreidsma@localhost java]$ javac -deprecation RectangleArea.java
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/java\[davidreidsma@localhost java]$ java RectangleArea

To compute the area of a rectangle,
 enter a width: 2
 enter a length: 2

The area is 4.0
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/java\[davidreidsma@localhost java]$ java RectangleArea

To compute the area of a rectangle,
 enter a width: 4
 enter a length: 5

The area is 20.0
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/java\[davidreidsma@localhost java]$ cd ..
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01\[davidreidsma@localhost proj01]$ exit

Script done on 2020-02-12 14:18:06-05:00 [COMMAND_EXIT_CODE="0"]
Script started on 2020-02-12 14:18:21-05:00 [TERM="screen" TTY="/dev/pts/3" COLUMNS="172" LINES="82"]
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01\[davidreidsma@localhost proj01]$ cd ruby
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/ruby\[davidreidsma@localhost ruby]$ ls
rectangle_area.rb
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/ruby\[davidreidsma@localhost ruby]$ cat rectangle_area.rb 
#! /usr/bin/ruby
# rectangle_area.rb computes the area of a rectangle given a width and length
#
# Input: the width and length of a rectangle
# Precondition: the width and length must be positive
# Output: the area of the rectangle
#
# Author: David Reidsma
# Date: 11/02/2020
################################################################

# function rectangleArea returns a rectangle's area given width and length
# Parameter: width, a number; must be greater than 0
# Parameter: length, a number; must be greater than 0
# Returns: the area of rectangle whose sides are of width and length
def rectangleArea(width, length)
  width * length
end

if __FILE__ == $0
  puts "\nTo compute the area of a rectangle,"
  
  print " enter its width: "
  width = gets.chomp.to_f

  print " enter its length: "
  length = gets.chomp.to_f

  print "\nThe area is: "
  area = rectangleArea(width, length)
  puts area
end
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/ruby\[davidreidsma@localhost ruby]$ ruby rectangle_area.rb

To compute the area of a rectangle,
 enter its width: 2
 enter its length: 2

The area is: 4.0
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/ruby\[davidreidsma@localhost ruby]$ ruby rectangle_area.rb

To compute the area of a rectangle,
 enter its width: 4
 enter its length: 5

The area is: 20.0
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01/ruby\[davidreidsma@localhost ruby]$ cd ..
kdavidreidsma@localhost:~/Programming/Calvin/214/proj01\[davidreidsma@localhost proj01]$ exit

Script done on 2020-02-12 14:18:58-05:00 [COMMAND_EXIT_CODE="0"]
