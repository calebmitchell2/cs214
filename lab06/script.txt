Script started on 2020-03-12 16:00:35-0400
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06[00m$ cd ada
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/ada[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/ada[00m$ cat average.adb
-- average.adb "test-drives" function Average.
-- Precondition: array is an array of numbers.
-- Output: the average of the numbers.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by:  David Reidsma
-- Date:          03/12/2020
-----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;             -- Put(String)
with Ada.Float_Text_IO; use Ada.Float_Text_IO; -- Put(Float)

procedure average is

-- Declare Vector type
type Vector is array ( Positive range <>) of Float;

-- Define array0 as an array containing no values
array0 : Vector := (0.0, 0.0);

-- Define array1 as an array containing 9, 8, 7, 6
array1 : Vector := (9.0, 8.0, 7.0, 6.0);

----------------------------------------------
-- sum() sums the values in an array         -
-- Receive: vec, an array of numbers         -
-- Return: the sum of the values in vec.     -
----------------------------------------------
function sum(vec: Vector) return Float is 
   Total : Float := 0.0; 
begin 
   -- for I in vec'Range 
   for I in 1..vec'Length
   loop 
      Total := Total + vec(I); 
   end loop; 
   return Total; 
end sum; 

-------------------------------------------------------------------------------
-- average() is a method that computes the average of the values in an array. -
-- Receive: vec, an array of doubles.                                         -
-- Return: the average of the values in vec.                                  -
-------------------------------------------------------------------------------
function average(vec: in Vector) return Float is
begin
   if vec'Length <= 0 then
      return 0.0;
   else
      return sum(vec) / Float(vec'Length);
   end if;
end average;


begin
   Put(" average 0 is ");
   Put( average(array0) );
   New_line;
   Put(" average 1 is ");
   Put( average(array1) );
   New_line;
end average;

]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/ada[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/ada[00m$ gnatmake average.adb
gnatmake: "average" up to date.
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/ada[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/ada[00m$ ./average
 average 0 is  0.00000E+00
 average 1 is  7.50000E+00
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/ada[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/ada[00m$ exit

Script done on 2020-03-12 16:00:50-0400
Script started on 2020-03-12 16:01:33-0400
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06[00m$ cd clojure
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/clojure[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/clojure[00m$ cat src/average.clj 
;; average.clj "test-drives" function average().
;;
;; Output: the average of a sequence of numbers.
;;
;; Usage: clojure -m average
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by:  David Reidsma
;; Date:          03/12/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns average)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sum() sums the values in a vector.       
;; Receive: vec, a vector of numbers.
;; Return: the sum of the values in vec.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn sum [vec]
  (if (vector? vec)
    (if (empty? vec)
      0.0
      (+
        (peek vec)
        (sum (pop vec))
      )
    )
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; sum2() sums the values in a vector.       
;; Receive: vec, a vector of numbers.
;; Return: the sum of the values in vec.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn sum2 [vec]
  (if (vector? vec)
    (if (empty? vec)
      0.0
      (reduce + vec)
    )
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; average() computes the average of a vector of numbers.
;; Receive: vec, a vector of numbers. 
;; Return: the average of the numbers in vec.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn average [vec]
  (if (vector? vec)
    (if (empty? vec)
      0.0
      (/ (sum vec) (count vec))
    )
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; main function to test functions sum() and average()
;; Output: the sum and average of some test vectors.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ emptyVec []
      testVec  [9.0 8.0 7.0 6.0]
    ]

    (print "\nThe empty vec: " emptyVec) 
    (print "\nThe test  vec: " testVec) 
    (println "\n")

    ;; Test sum()...
    (printf "\nThe first sum is %.3f\n" (sum emptyVec))
    (printf "The second sum is %.3f\n" (sum testVec))

    ;; Test average()...
    (printf "\nThe first average is %.3f\n" (average emptyVec))
    (printf "The second average is %.3f\n" (average testVec))
    (println "\n")

    ;; Test sum2()...
    (printf "\nThe first sum2 is %.3f\n" (sum2 emptyVec))
    (printf "The second sum2 is %.3f\n" (sum2 testVec))
    (println "\n")
  )
)

]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/clojure[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/clojure[00m$ clojure -m average

The empty vec:  []
The test  vec:  [9.0 8.0 7.0 6.0]


The first sum is 0.000
The second sum is 30.000

The first average is 0.000
The second average is 7.500



The first sum2 is 0.000
The second sum2 is 30.000


]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/clojure[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/clojure[00m$ exit

Script done on 2020-03-12 16:01:47-0400
Script started on 2020-03-12 16:00:14-0400
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06[00m$ cd java
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/java[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/java[00m$ cat Average.java
/* Average.java is a driver for method avg().
 *
 * Started by: Prof. Adams, for CS 214 at Calvin College
 *
 * Student Name: 	David Reidsma
 * Date:			03/12/2020
 *
 * Precondition: array, is an array of double values.
 * Output: the average of the numbers in array.
 ***************************************************************/

import java.io.*;

public class Average {
	public static void main(String[] args) {
		double[] array0 = new double[0];
		double[] array1 = { 9.0, 8.0, 7.0, 6.0 };

		// output the average of the values in the arrays
		System.out.println("The first average is " + avg(array0));
		System.out.println("The second average is " + avg(array1));
	}

	/*
	 * sum() is a method that computes the sum of all the values in an array of doubles.
	 * Receive: array, an array of doubles.
	 * Return: the sum of the values in array.
	 ************************************************************/
	static double sum(double[] array) {
		double total = 0.0;
		for (int i = 0; i < array.length; i++) {
			total += array[i];
		}
		return total;
	}

	/*
	 * avg() is a method that computes the average of the values in an array.
	 * Receive: array, an array of doubles.
	 * Return: the average of the values in array.
	 **************************************************************/
	static double avg(double array[]) {
		if (array == null || array.length <= 0)
			return 0.0;
		
		return sum(array) / array.length;
	}
}
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/java[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/java[00m$ javac -deprecation Average.java 
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/java[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/java[00m$ a[Kjava Average
The first average is 0.0
The second average is 7.5
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/java[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/java[00m$ cd ..[K[K[K[K[Kexit

Script done on 2020-03-12 16:00:30-0400
Script started on 2020-03-12 16:01:19-0400
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06[00m$ cd ruby
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/ruby[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/ruby[00m$ cat average.rb 
# average.rb averages the values of an array of doubles.
# Precondition: array is an array of numbers
# Output: the average of the values in array
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by:   David Reidsma
# Date:           03/12/2020
########################################################

###############################################
# sum() sums the values in an array
# Receive: array, an array of numbers
# Return: the sum of the values in array.
################################################
def sum(array)
   total = 0.0
   array.each { |num| total += num }
   return total
end

###############################################
# avg() is a method that computes the average of the values in an array.
# Receive: array, an array of doubles.
# Return: the average of the values in array.
###############################################
def average(array)
  if array.size <= 0
     return 0.0
  end
  return sum(array) / array.size
end

def main
   # Define array0 as an Array containing no values
   array0 = Array.new(0)
   # Define array1 as an Array containing 9.0, 8.0, 7.0, 6.0
   array1 = [ 9.0, 8.0, 7.0, 6.0 ]

   puts "sum 0 is: #{ sum(array0) }\n"
   puts "sum 1 is: #{ sum(array1) }\n"

   puts "average 0 is: #{ average(array0) }\n"
   puts "average 1 is: #{ average(array1) }\n"
end

main

]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/ruby[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/ruby[00m$ ruby average.rb 
sum 0 is: 0.0
sum 1 is: 30.0
average 0 is: 0.0
average 1 is: 7.5
]0;david@david-ThinkPad-P52s: ~/Programming/Calvin/cs214/lab06/ruby[01;32mdavid@david-ThinkPad-P52s[00m:[01;34m~/Programming/Calvin/cs214/lab06/ruby[00m$ exit

Script done on 2020-03-12 16:01:27-0400
