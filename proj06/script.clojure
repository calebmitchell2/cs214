Script started on 2020-03-18 22:56:37-04:00 [TERM="xterm-256color" TTY="/dev/pts/0" COLUMNS="209" LINES="39"]
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj06[david@davidreidsma proj06]$ cd clojure
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj06/clojure[david@davidreidsma clojure]$ cat src/vector_processor.clj 
;;;; vector_processor.clj is a program that reads in and prints out an vector.
;;;;
;;;; Author:    David Reidsma
;;;; Date:      03/18/2020

(ns vector_processor)

;;; read-vector reads in an vector.
;;; Input: size, an integer that is the target size of the vector
;;; Input: vec, a vector to add {n} values to
;;; Output: a vector containing {n} values
(defn read-vector [size]
  (loop [ num 1
          vec []]
    (if (= (count vec) size)
      vec
      (do
        (printf "Enter value #%d: " num) (flush)
        (recur (inc num) (conj vec (float(read))))))))

;;; print-vec prints out an vec.
;;; Input: vec, a vector to print out
(defn print-vector [vec]
  (if (seq vec)
    (do
      (printf "%f " (get vec 0))
      (recur (subvec vec 1)))))

;;; Main function of a program that reads in an vector from the user and prints it back out
(defn -main []
  (print "Enter an vector size: ") (flush)
  (let
    [ vector-size (read)
      vec (read-vector vector-size)]
    (do
    (print-vector vec)
    (println))))
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj06/clojure[david@davidreidsma clojure]$ clojure -m arra[K[K[K[Kvector_processor
Enter an vector size: 3
Enter value #1: 44.2
Enter value #2: -1
Enter value #3: 5.6
44.200001 -1.000000 5.600000 
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj06/clojure[david@davidreidsma clojure]$ exit

Script done on 2020-03-18 22:57:03-04:00 [COMMAND_EXIT_CODE="0"]
