Script started on 2020-04-16 02:21:09-04:00 [TERM="xterm-kitty" TTY="/dev/pts/3" COLUMNS="63" LINES="25"]
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08[david@davidreidsma proj08]$ cd ada
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/ada[david@davidreidsma ada]$ ls
Makefile                 [0m[01;32mtemperature_tester[0m
temperature_package.adb  temperature_tester.adb
temperature_package.ads  temperature_tester.ali
temperature_package.ali  temperature_tester.o
temperature_package.o
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/ada[david@davidreidsma ada]$ cat temperature_package.adb temperatu re_package.ads temperature_tester.adb
-- temperature_package.adb defines operations for the Temperature type.
-- Author: David Reidsma
-- Date: 04/12/2020

with Ada.Text_IO, Ada.Float_Text_IO, Ada.Characters.Handling;
use Ada.Text_IO, Ada.Float_Text_IO, Ada.Characters.Handling;

package body Temperature_Package is
   -- Initialize a Temperature.
   -- Input:
   --    Temp, a Temperature.
   --    Value, a Float.
   --    Scale, a Character. Can be one of: F,f,K,k,C,c
   procedure Init(Temp: out Temperature; Value: in Float; Scale: in Character) is
   begin
      if not Is_Scale_Valid(Scale) then
	 Put("Invalid scale provided! Options are: C,c,F,f,K,k");
	 return;
      end if;
      
      Temp.Value := Value;
      Temp.Scale := To_Upper(Scale);
   end Init;
   
   -- Get the value of a Temperature.
   -- Precondition: the Temperature has been initialized.
   -- Input: Temp, a Temperature.
   -- Returns: a Float.
   function Get_Value(Temp: in Temperature) return Float is
   begin
      return Temp.Value;
   end Get_Value;
   
   -- Get the scale of a Temperature. Will be F, K, or C.
   -- Precondition: the Temperature has been initialized.
   -- Input: Temp, a Temperature.
   -- Returns: a Character.
   function Get_Scale(Temp: in Temperature) return Character is
   begin
      return Temp.Scale;
   end Get_Scale;
   
   -- Convert a Temperature to kelvin.
   -- Precondition: the Temperature has been initialized.
   -- Input: Temp, a Temperature.
   -- Returns: a Temperature.
   function To_Kelvin(Temp: in Temperature) return Temperature is
      New_Temp: Temperature;
   begin
      if Is_Celsius(Temp.Scale) then
	 Init(New_Temp, Convert_Value_From_Celsius(Temp.Value, KELVIN), KELVIN);
      elsif Is_Fahrenheit(Temp.Scale) then
	 Init(New_Temp, Convert_Value_From_Fahrenheit(Temp.Value, KELVIN), KELVIN);
      else
	 return Temp;
      end if;
      
      return New_Temp;
   end To_Kelvin;
   
   -- Convert a Temperature to celsius.
   -- Precondition: the Temperature has been initialized.
   -- Input: Temp, a Temperature.
   -- Returns: a Temperature.
   function To_Celsius(Temp: in Temperature) return Temperature is
      New_Temp: Temperature;
   begin
      if Is_Kelvin(Temp.Scale) then
	 Init(New_Temp, Convert_Value_From_Kelvin(Temp.Value, CELSIUS), CELSIUS);
      elsif Is_Fahrenheit(Temp.Scale) then
	 Init(New_Temp, Convert_Value_From_Fahrenheit(Temp.Value, CELSIUS), CELSIUS);
      else
	 return Temp;
      end if;
      
      return New_Temp;
   end To_Celsius;
   
   -- Convert a Temperature to fahrenheit.
   -- Precondition: the Temperature has been initialized.
   -- Input: Temp, a Temperature.
   -- Returns: a Temperature.
   function To_Fahrenheit(Temp: in Temperature) return Temperature is
      New_Temp: Temperature;
   begin
      if Is_Kelvin(Temp.Scale) then
	 Init(New_Temp, Convert_Value_From_Kelvin(Temp.Value, FAHRENHEIT), FAHRENHEIT);
      elsif Is_Celsius(Temp.Scale) then
	 Init(New_Temp, Convert_Value_From_Celsius(Temp.Value, FAHRENHEIT), FAHRENHEIT);
      else
	 return Temp;
      end if;
      
      return New_Temp;
   end To_Fahrenheit;
   
   -- Read a Temperature in from the terminal.
   -- Input: Error, a Boolean; true if error occured, false otherwise.
   -- Output: true if an error occurs, or false if not, outputted to the Error parameter.
   -- Returns: a Temperature.
   function Read_Temp(Error: out Boolean) return Temperature is
      Line: String(1 .. 20);
      Last_Index: Natural;
      Value: Float;
      Scale: Character;
      Temp: Temperature;
   begin
      Get_Line(Line, Last_Index);
      
      begin
	 Value := Float'Value(Line(Line'First .. Last_Index - 2));
      exception
	 when Constraint_Error =>
	    Error := True;
	    return Temp;
      end;
      
      Scale := Line(Last_Index);
      if not Is_Scale_Valid(Scale) Then
	 Error := True;
	 return Temp;
      end if;
      
      Error := False;
      Init(Temp, Value, Scale);
      return Temp;
   end Read_Temp;
   
   -- Read a number of degrees in from the terminal.
   -- Output: true if an error occurs, or false if not, outputted to the Error parameter.
   -- Returns: a Float.
   function Read_Degrees(Error: out Boolean) return Float is
      Line: String(1 .. 20);
      Last_Index: Natural;
      Value: Float;
   begin
      Get_Line(Line, Last_Index);
      
      begin
	 Value := Float'Value(Line(Line'First .. Last_Index));
      exception
	 when Constraint_Error =>
	    Error := True;
	    return Value;
      end;
      return Value;
   end;
   
   -- Print a Temperature to the terminal.
   -- Precondition: the Temperature has been initialized.
   -- Input: Temp, a Temperature.
   procedure Put(Temp: in Temperature) is
   begin
      Put(Temp.Value, 1, 3, 0);
      Put(' ');
      Put(Temp.Scale);
   end Put;
   
   -- Raise the value of a Temperature by an amount.
   -- Precondition: the Temperature has been initialized.
   -- Input:
   --    Temp, a Temperature.
   --    Degrees, a Float; the amount to raise Temp by.
   -- Returns: a new Temperature with a raised value.
   function Raise_By(Temp: in Temperature; Degrees: in Float) return Temperature is
      New_Temp: Temperature;
   begin
      Init(New_Temp, Temp.Value + Degrees, Temp.Scale);
      return New_Temp;
   end Raise_By;
   
   -- Lower the value of a Temperature by an amount.
   -- Precondition: the Temperature has been initialized.
   -- Input:
   --    Temp, a Temperature.
   --    Degrees, a Float; the amount to lower Temp by.
   -- Returns: a new Temperature with a lowered value.
   function Lower_By(Temp: in Temperature; Degrees: in Float) return Temperature is
      New_Temp: Temperature;
   begin
      Init(New_Temp, Temp.Value - Degrees, Temp.Scale);
      return New_Temp;
   end Lower_By;
   
   -- Check if two Temperatures are equal.
   -- Precondition: both Temperatures have been initialized.
   -- Input:
   --    Temp1, a Temperature.
   --    Temp2, a Temperature.
   -- Returns: true if equal, false if not
   function Equals(Temp1, Temp2: in Temperature) return Boolean is
      Converted_Temp: Temperature := Temp2;
   begin
      if Temp2.Scale /= Temp1.Scale then
	 Converted_Temp := Convert_Temp(Temp2, Temp1.Scale);
      end if;
      return Temp1.Value = Converted_Temp.Value;
   end Equals;
   
   -- Check if a Temperature is less than another.
   -- Precondition: both Temperatures have been initialized.
   -- Input:
   --    Temp1, a Temperature.
   --    Temp2, a Temperature.
   -- Returns: true if the first is less than the second, false if not.
   function Less_Than(Temp1, Temp2: in Temperature) return Boolean is
      Converted_Temp: Temperature := Temp2;
   begin
      if Temp2.Scale /= Temp1.Scale then
	 Converted_Temp := Convert_Temp(Temp2, Temp1.Scale);
      end if;
      return Temp1.Value < Converted_Temp.Value;
   end Less_Than;
   
   -- Utility function to convert a Temperature to any scale.
   -- Precondition: the Temperature has been initialized.
   -- Input:
   --    Temp, a Temperature.
   --    Scale, a Character. Must be one of: K,k,F,f,C,c
   -- Returns: a new Temperature of the specified scale.
   function Convert_Temp(Temp: in Temperature; Scale: in Character) return Temperature is
   begin
      if Temp.Scale = Scale then
	 return Temp;
      elsif Is_Kelvin(Scale) then
	 return To_Kelvin(Temp);
      elsif Is_Celsius(Scale) then
	 return To_Celsius(Temp);
      elsif Is_Fahrenheit(Scale) then
	 return To_Fahrenheit(Temp);
      else
	 Put("Convert_Temp failed; invalid scale parameter provided. Options are: K,k,F,f,C,c"); New_Line;
	 return Temp;
      end if;
   end Convert_Temp;
   
   -- Utility function to convert a Celsius value to another scale.
   -- Input:
   --    Value_Celsius, a Float.
   --    Scale, a Character.
   -- Returns: a Float.
   function Convert_Value_From_Celsius(Value_Celsius: in Float; Scale: in Character) return Float is
   begin
      if Is_Fahrenheit(Scale) then
	 return (Value_Celsius * 9.0 / 5.0) + 32.0;
      elsif Is_Kelvin(Scale) then
	 return Value_Celsius - ABSOLUTE_ZERO;
      else
	 Put("Invalid scale provided for Convert_Value_From_Celsius. Options are: F,f,K,k");
	 return 0.0;
      end if;
   end Convert_Value_From_Celsius;
   
   -- Utility function to convert a Kelvin value to another scale.
   -- Input:
   --    Value_Kelvin, a Float.
   --    Scale, a Character.
   -- Returns: a Float.
   function Convert_Value_From_Kelvin(Value_Kelvin: in Float; Scale: in Character) return Float is
      In_Celsius: Float := Value_Kelvin + ABSOLUTE_ZERO;
   begin
      if Is_Fahrenheit(Scale) then
	 return Convert_Value_From_Celsius(In_Celsius, FAHRENHEIT);
      elsif Is_Celsius(Scale) then
	 return In_Celsius;
      else
	 Put("Invalid scale provided for Convert_Value_From_Kelvin. Options are: F,f,C,c");
	 return 0.0;
      end if;
   end Convert_Value_From_Kelvin;
   
   -- Utility function to convert a Fahrenheit value to another scale.
   -- Input:
   --    Value_Fahrenheit, a Float.
   --    Scale, a Character.
   -- Returns: a Float.
   function Convert_Value_From_Fahrenheit(Value_Fahrenheit: in Float; Scale: in Character) return Float is
      In_Celsius: Float := (Value_Fahrenheit - 32.0) * 5.0 / 9.0;
   begin
      
      if Is_Kelvin(Scale) then
	 return Convert_Value_From_Celsius(In_Celsius, KELVIN);
      elsif Is_Celsius(Scale) then
	 return In_Celsius;
      else
	 Put("Invalid scale provided for Convert_Value_From_Fahrenheit. Options are: K,k,C,c");
	 return 0.0;
      end if;
   end Convert_Value_From_Fahrenheit;
   
   -- Utility function to check if a scale character is Celsius.
   -- Input: Scale, a Character.
   -- Returns: true if Celsius, false if not.
   function Is_Celsius(Scale: in Character) return Boolean is
   begin
      return Scale = 'c' or Scale = 'C';
   end Is_Celsius;
   
   -- Utility function to check if a scale character is Fahrenheit.
   -- Input: Scale, a Character.
   -- Returns: true if Fahrenheit, false if not.
   function Is_Fahrenheit(Scale: in Character) return Boolean is
   begin
      return Scale = 'f' or Scale = 'F';
   end Is_Fahrenheit;
   
   -- Utility function to check if a scale character is Kelvin.
   -- Input: Scale, a Character.
   -- Returns: true if Kelvin, false if not.
   function Is_Kelvin(Scale: in Character) return Boolean is
   begin
      return Scale = 'k' or Scale = 'K';
   end Is_Kelvin;
   
   -- Utility function to check if a scale character is valid.
   -- Input: Scale, a Character.
   -- Returns: true if valid, false if not.
   function Is_Scale_Valid(Scale: in Character) return Boolean is
   begin
      if not Is_Kelvin(Scale) and not Is_Celsius(Scale) and not Is_Fahrenheit(Scale) then
	 return False;
      else
	 return True;
      end if;
   end Is_Scale_Valid;
end Temperature_Package;
-- temperature_package.ads declares the Temperature type and its operations.
-- Author: David Reidsma
-- Date: 04/12/2020
package Temperature_Package is
   type Temperature is private;
   
   -- Initialize a Temperature.
   -- Input:
   --    Temp, a Temperature.
   --    Value, a Float.
   --    Scale, a Character. Can be one of: F,f,K,k,C,c
   procedure Init(Temp: out Temperature; Value: in Float; Scale: in Character);
   -- Get the value of a Temperature.
   -- Precondition: the Temperature has been initialized.
   -- Input: Temp, a Temperature.
   -- Returns: a Float.
   function Get_Value(Temp: in Temperature) return Float;
   -- Get the scale of a Temperature. Will be F, K, or C.
   -- Precondition: the Temperature has been initialized.
   -- Input: Temp, a Temperature.
   -- Returns: a Character.
   function Get_Scale(Temp: in Temperature) return Character;
   -- Convert a Temperature to kelvin.
   -- Precondition: the Temperature has been initialized.
   -- Input: Temp, a Temperature.
   -- Returns: a Temperature.
   function To_Kelvin(Temp: in Temperature) return Temperature;
   -- Convert a Temperature to celsius.
   -- Precondition: the Temperature has been initialized.
   -- Input: Temp, a Temperature.
   -- Returns: a Temperature.
   function To_Celsius(Temp: in Temperature) return Temperature;
   -- Convert a Temperature to fahrenheit.
   -- Precondition: the Temperature has been initialized.
   -- Input: Temp, a Temperature.
   -- Returns: a Temperature.
   function To_Fahrenheit(Temp: in Temperature) return Temperature;
   -- Read a Temperature in from the terminal.
   -- Output: true if an error occurs, or false if not, outputted to the Error parameter.
   -- Returns: a Temperature.
   function Read_Temp(Error: out Boolean) return Temperature;
   -- Read a number of degrees in from the terminal.
   -- Output: true if an error occurs, or false if not, outputted to the Error parameter.
   -- Returns: a Float.
   function Read_Degrees(Error: out Boolean) return Float;
   -- Print a Temperature to the terminal.
   -- Precondition: the Temperature has been initialized.
   -- Input: Temp, a Temperature.
   procedure Put(Temp: in Temperature);
   -- Raise the value of a Temperature by an amount.
   -- Precondition: the Temperature has been initialized.
   -- Input:
   --    Temp, a Temperature.
   --    Degrees, a Float; the amount to raise Temp by.
   -- Returns: a new Temperature with a raised value.
   function Raise_By(Temp: in Temperature; Degrees: in Float) return Temperature;
   -- Lower the value of a Temperature by an amount.
   -- Precondition: the Temperature has been initialized.
   -- Input:
   --    Temp, a Temperature.
   --    Degrees, a Float; the amount to lower Temp by.
   -- Returns: a new Temperature with a lowered value.
   function Lower_By(Temp: in Temperature; Degrees: in Float) return Temperature;
   -- Check if two Temperatures are equal.
   -- Precondition: both Temperatures have been initialized.
   -- Input:
   --    Temp1, a Temperature.
   --    Temp2, a Temperature.
   -- Returns: true if equal, false if not
   function Equals(Temp1, Temp2: in Temperature) return Boolean;
   -- Check if a Temperature is less than another.
   -- Precondition: both Temperatures have been initialized.
   -- Input:
   --    Temp1, a Temperature.
   --    Temp2, a Temperature.
   -- Returns: true if the first is less than the second, false if not.
   function Less_Than(Temp1, Temp2: in Temperature) return Boolean;
   
private
   KELVIN: constant Character := 'K';
   CELSIUS: constant Character := 'C';
   FAHRENHEIT: constant Character := 'F';
   
   ABSOLUTE_ZERO: constant Float := -273.15;
   
   -- Utility function to convert a Celsius value to another scale.
   -- Input:
   --    Value_Celsius, a Float.
   --    Scale, a Character.
   -- Returns: a Float.
   function Convert_Value_From_Celsius(Value_Celsius: in Float; Scale: in Character) return Float;
   -- Utility function to convert a Kelvin value to another scale.
   -- Input:
   --    Value_Kelvin, a Float.
   --    Scale, a Character.
   -- Returns: a Float.
   function Convert_Value_From_Kelvin(Value_Kelvin: in Float; Scale: in Character) return Float;
   -- Utility function to convert a Fahrenheit value to another scale.
   -- Input:
   --    Value_Fahrenheit, a Float.
   --    Scale, a Character.
   -- Returns: a Float.
   function Convert_Value_From_Fahrenheit(Value_Fahrenheit: in Float; Scale: in Character) return Float;
   -- Utility function to check if a scale character is valid.
   -- Input: Scale, a Character.
   -- Returns: true if valid, false if not.
   function Is_Scale_Valid(Scale: in Character) return Boolean;
   -- Utility function to check if a scale character is Celsius.
   -- Input: Scale, a Character.
   -- Returns: true if Celsius, false if not.
   function Is_Celsius(Scale: in Character) return Boolean;
   -- Utility function to check if a scale character is Fahrenheit.
   -- Input: Scale, a Character.
   -- Returns: true if Fahrenheit, false if not.
   function Is_Fahrenheit(Scale: in Character) return Boolean;
   -- Utility function to check if a scale character is Kelvin.
   -- Input: Scale, a Character.
   -- Returns: true if Kelvin, false if not.
   function Is_Kelvin(Scale: in Character) return Boolean;
   -- Utility function to convert a Temperature to any scale.
   -- Precondition: the Temperature has been initialized.
   -- Input:
   --    Temp, a Temperature.
   --    Scale, a Character. Must be one of: K,k,F,f,C,c
   -- Returns: a new Temperature of the specified scale.
   function Convert_Temp(Temp: in Temperature; Scale: in Character) return Temperature;
   
   type Temperature is
      record
	 Value: Float;
	 Scale: Character;
      end record;
	 
end Temperature_Package;
-- Driver for the Temperature type.
-- Author: David Reidsma
-- Date: 04/12/2020

with Ada.Text_IO, Ada.Float_Text_IO, Temperature_Package;
use Ada.Text_IO, Ada.Float_Text_IO, Temperature_Package;

procedure Temperature_Tester is
   Start: Temperature_Package.Temperature;
   Start_Scale: Character;
   Stop: Temperature_Package.Temperature;
   Step_String: String(1 .. 20);
   Step: Float;
   Error: Boolean := False;
   Current: Temperature_Package.Temperature;
begin
   Put("Temperature examples:"); New_Line;
   Put("20.5 C"); New_Line;
   Put("10 K"); New_Line;
   Put("35.1 F"); New_Line;
   Put("Enter a start temperature: ");
   Start := Temperature_Package.Read_Temp(Error);
   while Error loop
      Put("Invalid input, try again: ");
      Start := Temperature_Package.Read_Temp(Error);
   end loop;
   
   Start_Scale := Temperature_Package.Get_Scale(Start);
   
   Put("Enter a stop temperature: ");
   Stop := Temperature_Package.Read_Temp(Error);
   while Error loop
      Put("Invalid input, try again: ");
      Stop := Temperature_Package.Read_Temp(Error);
   end loop;
   
   Put("Enter a step amount of degrees (in the same scale as your start temperature): ");
   Step := Temperature_Package.Read_Degrees(Error);
   while Error loop
      Put("Invalid input, try again: ");
      Step := Temperature_Package.Read_Degrees(Error);
   end loop;
   
   if Temperature_Package.Equals(Start, Stop) then
      Put("Start and stop temperatures are already equal.");
      New_Line;
      return;
   end if;
   
   Current := Start;
   Print_Table_Loop:
       loop
	  if Temperature_Package.Less_Than(Start, Stop) /= Temperature_Package.Less_Than(Current, Stop) and not Temperature_Package.Equals(Current, Stop) then
	     exit Print_Table_Loop;
	  end if;
      
	  Set_Col(1);
	  Put(Temperature_Package.To_Fahrenheit(Current));
	  Set_Col(15);
	  Put(Temperature_Package.To_Celsius(Current));
	  Set_Col(29);
	  Put(Temperature_Package.To_Kelvin(Current));
	  New_Line;

	  if Temperature_Package.Less_Than(Start, Stop) then
	     Current := Temperature_Package.Raise_By(Current, Step);
	  else
	     Current := Temperature_Package.Lower_By(Current, Step);
	  end if;
       end loop Print_Table_Loop;
end Temperature_Tester;
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/ada[david@davidreidsma ada]$ g[Kmake
make: 'temperature_tester' is up to date.
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/ada[david@davidreidsma ada]$ ./temperature_tester 
Temperature examples:
20.5 C
10 K
35.1 F
Enter a start temperature: 0 F
Enter a stop temperature: 100 C
Enter a step amount of degrees (in the same scale as your start temperature): 2.5

0.000 F       -17.778 C     255.372 K
2.500 F       -16.389 C     256.761 K
5.000 F       -15.000 C     258.150 K
7.500 F       -13.611 C     259.539 K
10.000 F      -12.222 C     260.928 K
12.500 F      -10.833 C     262.317 K
15.000 F      -9.444 C      263.706 K
17.500 F      -8.056 C      265.094 K
20.000 F      -6.667 C      266.483 K
22.500 F      -5.278 C      267.872 K
25.000 F      -3.889 C      269.261 K
27.500 F      -2.500 C      270.650 K
30.000 F      -1.111 C      272.039 K
32.500 F      0.278 C       273.428 K
35.000 F      1.667 C       274.817 K
37.500 F      3.056 C       276.206 K
40.000 F      4.444 C       277.594 K
42.500 F      5.833 C       278.983 K
45.000 F      7.222 C       280.372 K
47.500 F      8.611 C       281.761 K
50.000 F      10.000 C      283.150 K
52.500 F      11.389 C      284.539 K
55.000 F      12.778 C      285.928 K
57.500 F      14.167 C      287.317 K
60.000 F      15.556 C      288.706 K
62.500 F      16.944 C      290.094 K
65.000 F      18.333 C      291.483 K
67.500 F      19.722 C      292.872 K
70.000 F      21.111 C      294.261 K
72.500 F      22.500 C      295.650 K
75.000 F      23.889 C      297.039 K
77.500 F      25.278 C      298.428 K
80.000 F      26.667 C      299.817 K
82.500 F      28.056 C      301.206 K
85.000 F      29.444 C      302.594 K
87.500 F      30.833 C      303.983 K
90.000 F      32.222 C      305.372 K
92.500 F      33.611 C      306.761 K
95.000 F      35.000 C      308.150 K
97.500 F      36.389 C      309.539 K
100.000 F     37.778 C      310.928 K
102.500 F     39.167 C      312.317 K
105.000 F     40.556 C      313.706 K
107.500 F     41.944 C      315.094 K
110.000 F     43.333 C      316.483 K
112.500 F     44.722 C      317.872 K
115.000 F     46.111 C      319.261 K
117.500 F     47.500 C      320.650 K
120.000 F     48.889 C      322.039 K
122.500 F     50.278 C      323.428 K
125.000 F     51.667 C      324.817 K
127.500 F     53.056 C      326.206 K
130.000 F     54.444 C      327.594 K
132.500 F     55.833 C      328.983 K
135.000 F     57.222 C      330.372 K
137.500 F     58.611 C      331.761 K
140.000 F     60.000 C      333.150 K
142.500 F     61.389 C      334.539 K
145.000 F     62.778 C      335.928 K
147.500 F     64.167 C      337.317 K
150.000 F     65.556 C      338.706 K
152.500 F     66.944 C      340.094 K
155.000 F     68.333 C      341.483 K
157.500 F     69.722 C      342.872 K
160.000 F     71.111 C      344.261 K
162.500 F     72.500 C      345.650 K
165.000 F     73.889 C      347.039 K
167.500 F     75.278 C      348.428 K
170.000 F     76.667 C      349.817 K
172.500 F     78.056 C      351.206 K
175.000 F     79.444 C      352.594 K
177.500 F     80.833 C      353.983 K
180.000 F     82.222 C      355.372 K
182.500 F     83.611 C      356.761 K
185.000 F     85.000 C      358.150 K
187.500 F     86.389 C      359.539 K
190.000 F     87.778 C      360.928 K
192.500 F     89.167 C      362.317 K
195.000 F     90.556 C      363.706 K
197.500 F     91.944 C      365.094 K
200.000 F     93.333 C      366.483 K
202.500 F     94.722 C      367.872 K
205.000 F     96.111 C      369.261 K
207.500 F     97.500 C      370.650 K
210.000 F     98.889 C      372.039 K
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/ada[david@davidreidsma ada]$ ./temperature_tester 
Temperature examples:
20.5 C
10 K
35.1 F
Enter a start temperature: 0 K
Enter a stop temperature: 212 F
Enter a step amount of degrees (in the same scale as your start temperature): 20.0

-459.670 F    -273.150 C    0.000 K
-423.670 F    -253.150 C    20.000 K
-387.670 F    -233.150 C    40.000 K
-351.670 F    -213.150 C    60.000 K
-315.670 F    -193.150 C    80.000 K
-279.670 F    -173.150 C    100.000 K
-243.670 F    -153.150 C    120.000 K
-207.670 F    -133.150 C    140.000 K
-171.670 F    -113.150 C    160.000 K
-135.670 F    -93.150 C     180.000 K
-99.670 F     -73.150 C     200.000 K
-63.670 F     -53.150 C     220.000 K
-27.670 F     -33.150 C     240.000 K
8.330 F       -13.150 C     260.000 K
44.330 F      6.850 C       280.000 K
80.330 F      26.850 C      300.000 K
116.330 F     46.850 C      320.000 K
152.330 F     66.850 C      340.000 K
188.330 F     86.850 C      360.000 K
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/ada[david@davidreidsma ada]$ cd ..
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08[david@davidreidsma proj08]$ exit

Script done on 2020-04-16 02:21:57-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2020-04-16 02:22:40-04:00 [TERM="xterm-kitty" TTY="/dev/pts/3" COLUMNS="63" LINES="25"]
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08[david@davidreidsma proj08]$ cd clojure
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/clojure[david@davidreidsma clojure]$ ls src
temperature.clj  temperature_tester.clj
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/clojure[david@davidreidsma clojure]$ cat src/temperature.clj src/tempe rature_tester.clj
(require '[clojure.string :as str])

;; Temperature stores a float (the value) and a character (the scale) and represents a temperature.
;; Author: David Reidsma
;; Date: 04/16/2020
(defrecord Temperature [value scale])

(def ^:const celsius \C)
(def ^:const fahrenheit \F)
(def ^:const kelvin \K)
(def ^:const absolute-zero -273.15)

;; Change a character to uppercase.
;; Input: chr: A character.
;; Returns: the character in uppercase.
(defn char-to-upper [chr]
  (nth (char-array (clojure.string/upper-case chr)) 0))

;; Check if a scale character is in C,c,F,f,K,k
;; Input: scale: A character.
;; Returns: true if valid, false otherwise.
(defn is-scale-valid? [scale]
  (let [upper (char-to-upper scale)]
    (or (= upper celsius) (= upper kelvin) (= upper fahrenheit))))

;; Create a temperature with a specific value and scale.
;; Input:
;;   value: A float, the value of the temperature.
;;   scale: A character literal, the scale of the temperature. Must be one of: C,c,F,f,K,k
;; Returns: a Temperature.
(defn create-temperature [value scale]
  (if (is-scale-valid? scale)
    (->Temperature value (char-to-upper scale))
    (println "Invalid scale provided to create-temperature.")))

;; Get the value of a temperature.
;; Precondition: the temperature is initialized.
;; Input: temp: A Temperature.
;; Returns: a float, the value of the temperature.
(defn get-value [^Temperature temp]
  (:value temp))

;; Get the scale of a temperature.
;; Precondition: the temperature is initialized.
;; Input: temp: A Temperature.
;; Returns: a character, the scale of the temperature.
(defn get-scale [^Temperature temp]
  (:scale temp))

;; Convert a temperature to celsius.
;; Precondition: the temperature is initialized.
;; Input: temp: A Temperature.
;; Returns: a new Temperature.
(defn to-celsius [^Temperature temp]
  (if (= kelvin (get-scale temp))
    (create-temperature (+ absolute-zero (get-value temp)) celsius)
    (if (= fahrenheit (get-scale temp))
      (create-temperature (* (/ 5.0 9.0) (- (get-value temp) 32)) celsius)
      temp)))

;; Convert a temperature to fahrenheit.
;; Precondition: the temperature is initialized.
;; Input: temp: A Temperature.
;; Returns: a new Temperature.
(defn to-fahrenheit [^Temperature temp]
  (if (= kelvin (get-scale temp))
    (create-temperature (+ 32 (* (/ 9.0 5.0) (+ absolute-zero (get-value temp)))) fahrenheit)
    (if (= celsius (get-scale temp))
      (create-temperature (+ 32 (* (/ 9.0 5.0) (get-value temp))) fahrenheit)
      temp)))

;; Convert a temperature to kelvin.
;; Precondition: the temperature is initialized.
;; Input: temp: A Temperature.
;; Returns: a new Temperature.
(defn to-kelvin [^Temperature temp]
  (if (= celsius (get-scale temp))
    (create-temperature (- (get-value temp) absolute-zero) kelvin)
    (if (= fahrenheit (get-scale temp))
      (create-temperature (- (* (/ 5.0 9.0) (- (get-value temp) 32)) absolute-zero) kelvin)
      temp)))

;; Check if a string is numeric.
;; Input: str: A string.
;; Returns: true if the string can be parsed as a float, false if not.
(defn is-str-numeric? [str]
  (try
     (do
       (Float/parseFloat str)
       true)
     (catch NumberFormatException e false)))

;; Read a temperature in from the user.
;; Returns: a new Temperature (or nil) and a boolean indicating whether an error occurred.
(defn read-temperature []
  (let [line (read-line)
        parts (str/split line #" ")]
    (if (= 2 (count parts))
      (let [value-str (nth parts 0)
            scale-str (nth parts 1)
            scale-ch (nth (char-array scale-str) 0)]
        (if (= (count scale-str) 1)
          (if (is-scale-valid? scale-ch)
            (if (is-str-numeric? value-str)
              [(create-temperature (Float/parseFloat value-str) scale-ch) false]
              [nil true])
            [nil true])
          [nil true]))
      [nil true])))

;; Get a string representation of a temperature.
;; Precondition: the temperature is initialized.
;; Input: temp: A Temperature.
;; Returns: a String that looks like "{value} {s}" where {s} is in C,K,F
(defn to-string [^Temperature temp]
  (str (format "%.3f" (get-value temp)) " " (get-scale temp)))

;; Get a raised Temperature.
;; Precondition: the temperature is initialized.
;; Input:
;;   temp: A Temperature.
;;   amount: The amount of degrees to raise the temperature by.
;; Returns: a new Temperature.
(defn raise [temp amount]
  (create-temperature (+ amount (get-value temp)) (get-scale temp)))

;; Get a lowered Temperature.
;; Precondition: the temperature is initialized.
;; Input:
;;   temp: A Temperature.
;;   amount: The amount of degrees to raise the temperature by.
;; Returns: a new Temperature.
(defn lower [temp amount]
  (create-temperature (- (get-value temp) amount) (get-scale temp)))

;; Convert a temperature to another scale.
;; Precondition: the temperature is initialized.
;; Input:
;;   temp: A Temperature.
;;   scale: A character, must be in C,c,F,f,K,k
;; Returns: a new Temperature in the specified scale.
(defn convert-temp [temp scale]
  (if (= scale (get-scale temp))
    temp
    (if (= scale celsius)
      (to-celsius temp)
      (if (= scale kelvin)
        (to-kelvin temp)
        (if (= scale fahrenheit)
          (to-fahrenheit temp)
          ())))))

;; Check if two temperatures are equal.
;; Precondition: both temperatures are initialized.
;; Input:
;;   temp1: A Temperature.
;;   temp2: Another Temperature.
;; Returns: true if equal, false otherwise.
(defn equals? [temp1 temp2]
 (= (get-value temp1) (get-value (convert-temp temp2 (get-scale temp1)))))

;; Check if a temperature is less than another.
;; Precondition: both temperatures are initialized.
;; Input:
;;   temp1: A Temperature.
;;   temp2: Another temperature.
;; Returns: true if the first is less than the second, false otherwise.
(defn less-than? [temp1 temp2]
 (< (get-value temp1) (get-value (convert-temp temp2 (get-scale temp1)))))
;; Driver for the Temperature record.
;; Author: David Reidsma
;; Date: 04/16/2020

(ns temperature_tester)

(load-file "src/temperature.clj")

;; Read a temperature in from the user and print a message. Keep trying until we get valid input.
;; Input: message, a string.
;; Returns: a Temperature.
(defn read-temperature-with-message [message]
  (do
    (println message)
    (let [[temp error] (read-temperature)]
      (if error
        (read-temperature-with-message "Invalid input, try again: ")
        temp))))

;; Read a number in from the user and print a message. Keep trying until we get valid input.
;; Input: message, a string.
;; Returns: a float.
(defn read-num-with-message [message]
  (do
    (println message)
    (let [line (read-line)]
      (if (is-str-numeric? line)
        (Float/parseFloat line)
        (read-num-with-message "Invalid input, try again: ")))))

;; Print a table of temperatures.
;; Input:
;;   current: The Temperature to start at.
;;   stop: The Temperature to stop at.
;;   step: The amount of degrees to add/subtract each iteration.
;;   step-fun: A function ([Temperature float] -> Temperature) that will either raise or lower a Temperature by a given amount.
;;   start-was-lower: True if the original start value was lower than the stop, false if not.
(defn print-table [current stop step step-fun start-was-lower]
  (let [fahr (format "%-20s" (to-string (to-fahrenheit current)))
        cels (format "%-20s" (to-string (to-celsius current)))
        kelv (format "%-20s" (to-string (to-kelvin current)))]
    (if (or (= start-was-lower (less-than? current stop)) (equals? current stop))
      (do
        (println (str fahr cels kelv))
        (print-table (step-fun current step) stop step step-fun start-was-lower))
      ())))

;; Main function.
(defn -main []
  (do
    (println """Temperature examples:
    20.5 C
    10 K
    35.1 F""")
    (let [start (read-temperature-with-message "Enter a start temperature: ")
          stop (read-temperature-with-message "Enter a stop temperature: ")
          step (read-num-with-message "Enter a step amount of degrees (in the same scale as your start temperature):")]
      (if (equals? start stop)
        (println "Start and stop temperatures are already equal.")
        (let [start-was-lower (less-than? start stop)]
          (if start-was-lower
            (print-table start stop step raise start-was-lower)
            (print-table start stop step lower start-was-lower)))))))
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/clojure[david@davidreidsma clojure]$ clojure -m temperature_tester
 Temperature examples:
    20.5 C
    10 K
    35.1 F 
Enter a start temperature: 
0 F
Enter a stop temperature: 
100 C
Enter a step amount of degrees (in the same scale as your start temperature):
2.5
0.000 F             -17.778 C           255.372 K           
2.500 F             -16.389 C           256.761 K           
5.000 F             -15.000 C           258.150 K           
7.500 F             -13.611 C           259.539 K           
10.000 F            -12.222 C           260.928 K           
12.500 F            -10.833 C           262.317 K           
15.000 F            -9.444 C            263.706 K           
17.500 F            -8.056 C            265.094 K           
20.000 F            -6.667 C            266.483 K           
22.500 F            -5.278 C            267.872 K           
25.000 F            -3.889 C            269.261 K           
27.500 F            -2.500 C            270.650 K           
30.000 F            -1.111 C            272.039 K           
32.500 F            0.278 C             273.428 K           
35.000 F            1.667 C             274.817 K           
37.500 F            3.056 C             276.206 K           
40.000 F            4.444 C             277.594 K           
42.500 F            5.833 C             278.983 K           
45.000 F            7.222 C             280.372 K           
47.500 F            8.611 C             281.761 K           
50.000 F            10.000 C            283.150 K           
52.500 F            11.389 C            284.539 K           
55.000 F            12.778 C            285.928 K           
57.500 F            14.167 C            287.317 K           
60.000 F            15.556 C            288.706 K           
62.500 F            16.944 C            290.094 K           
65.000 F            18.333 C            291.483 K           
67.500 F            19.722 C            292.872 K           
70.000 F            21.111 C            294.261 K           
72.500 F            22.500 C            295.650 K           
75.000 F            23.889 C            297.039 K           
77.500 F            25.278 C            298.428 K           
80.000 F            26.667 C            299.817 K           
82.500 F            28.056 C            301.206 K           
85.000 F            29.444 C            302.594 K           
87.500 F            30.833 C            303.983 K           
90.000 F            32.222 C            305.372 K           
92.500 F            33.611 C            306.761 K           
95.000 F            35.000 C            308.150 K           
97.500 F            36.389 C            309.539 K           
100.000 F           37.778 C            310.928 K           
102.500 F           39.167 C            312.317 K           
105.000 F           40.556 C            313.706 K           
107.500 F           41.944 C            315.094 K           
110.000 F           43.333 C            316.483 K           
112.500 F           44.722 C            317.872 K           
115.000 F           46.111 C            319.261 K           
117.500 F           47.500 C            320.650 K           
120.000 F           48.889 C            322.039 K           
122.500 F           50.278 C            323.428 K           
125.000 F           51.667 C            324.817 K           
127.500 F           53.056 C            326.206 K           
130.000 F           54.444 C            327.594 K           
132.500 F           55.833 C            328.983 K           
135.000 F           57.222 C            330.372 K           
137.500 F           58.611 C            331.761 K           
140.000 F           60.000 C            333.150 K           
142.500 F           61.389 C            334.539 K           
145.000 F           62.778 C            335.928 K           
147.500 F           64.167 C            337.317 K           
150.000 F           65.556 C            338.706 K           
152.500 F           66.944 C            340.094 K           
155.000 F           68.333 C            341.483 K           
157.500 F           69.722 C            342.872 K           
160.000 F           71.111 C            344.261 K           
162.500 F           72.500 C            345.650 K           
165.000 F           73.889 C            347.039 K           
167.500 F           75.278 C            348.428 K           
170.000 F           76.667 C            349.817 K           
172.500 F           78.056 C            351.206 K           
175.000 F           79.444 C            352.594 K           
177.500 F           80.833 C            353.983 K           
180.000 F           82.222 C            355.372 K           
182.500 F           83.611 C            356.761 K           
185.000 F           85.000 C            358.150 K           
187.500 F           86.389 C            359.539 K           
190.000 F           87.778 C            360.928 K           
192.500 F           89.167 C            362.317 K           
195.000 F           90.556 C            363.706 K           
197.500 F           91.944 C            365.094 K           
200.000 F           93.333 C            366.483 K           
202.500 F           94.722 C            367.872 K           
205.000 F           96.111 C            369.261 K           
207.500 F           97.500 C            370.650 K           
210.000 F           98.889 C            372.039 K           
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/clojure[david@davidreidsma clojure]$ clojure -m temperature_tester
 Temperature examples:
    20.5 C
    10 K
    35.1 F 
Enter a start temperature: 
0 K
Enter a stop temperature: 
212 F
Enter a step amount of degrees (in the same scale as your start temperature):
20.0
-459.670 F          -273.150 C          0.000 K             
-423.670 F          -253.150 C          20.000 K            
-387.670 F          -233.150 C          40.000 K            
-351.670 F          -213.150 C          60.000 K            
-315.670 F          -193.150 C          80.000 K            
-279.670 F          -173.150 C          100.000 K           
-243.670 F          -153.150 C          120.000 K           
-207.670 F          -133.150 C          140.000 K           
-171.670 F          -113.150 C          160.000 K           
-135.670 F          -93.150 C           180.000 K           
-99.670 F           -73.150 C           200.000 K           
-63.670 F           -53.150 C           220.000 K           
-27.670 F           -33.150 C           240.000 K           
8.330 F             -13.150 C           260.000 K           
44.330 F            6.850 C             280.000 K           
80.330 F            26.850 C            300.000 K           
116.330 F           46.850 C            320.000 K           
152.330 F           66.850 C            340.000 K           
188.330 F           86.850 C            360.000 K           
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/clojure[david@davidreidsma clojure]$ cd ..
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08[david@davidreidsma proj08]$ exit

Script done on 2020-04-16 02:23:33-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2020-04-16 02:19:43-04:00 [TERM="xterm-kitty" TTY="/dev/pts/3" COLUMNS="63" LINES="25"]
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08[david@davidreidsma proj08]$ cd java
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/java[david@davidreidsma java]$ ls
Temperature.class  TemperatureTester.class
Temperature.java   TemperatureTester.java
Temperature.java~  TemperatureTester.java~
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/java[david@davidreidsma java]$ cat Temperature.java TemperatureTest er.java
import java.lang.Character;
import java.lang.Float;
import java.util.Scanner;

/*
 * This class represents a temperature at a given value and scale.
 * Author: David Reidsma
 * Date: 04/13/2020
 */
class Temperature {
    private char scale;
    private double value;

    private static final char KELVIN = 'K';
    private static final char CELSIUS = 'C';
    private static final char FAHRENHEIT = 'F';

    private static final float ABSOLUTE_ZERO = -273.15f;

    /**
     * Create a temperature with a specific value and scale.
     * @param value The value of the temperature.
     * @param scale The scale of the temperature. Valid options are: C,c,F,f,K,k
     */
    Temperature(double value, char scale) {
	this.scale = Character.toUpperCase(scale);
	if (!isScaleValid(this.scale))
	    throw new IllegalArgumentException("Invalid scale provided! Options are: C,c,F,f,K,k");
	
	this.value = value;
    }

    /**
     * Get the value of this temperature.
     * @return The numeric value.
     */
    double getValue() { return value; }

    /**
     * Get the scale of this temperature.
     * @return The character representing the scale. Will return one of: C,c,F,f,K,k
     */
    char getScale() { return scale; }

    /**
     * Get a new temperature that is equal to this one, but in Kelvin.
     * @return A new Temperature object in Kelvin.
     */
    Temperature toKelvin() {
	if (scale == CELSIUS)
	    return new Temperature(value - ABSOLUTE_ZERO, KELVIN);
	else if (scale == FAHRENHEIT)
	    return new Temperature((value - 32) * 5.0 / 9.0 - ABSOLUTE_ZERO, KELVIN);
	else
	    return this;
    }

    /**
     * Get a new temperature that is equal to this one, but in Celsius."
     * @return A new Temperature object in Kelvin.
     */
    Temperature toCelsius() {
	if (scale == KELVIN)
	    return new Temperature(value + ABSOLUTE_ZERO, CELSIUS);
	else if (scale == FAHRENHEIT)
	    return new Temperature((value - 32) * 5.0 / 9.0, CELSIUS);
	else
	    return this;
    }

    /**
     * Get a new temperature that is equal to this one, but in Fahrenheit.
     * @return A new Temperature object in Kelvin.
     */
    Temperature toFahrenheit() {
	if (scale == KELVIN)
	    return new Temperature(((value + ABSOLUTE_ZERO) * 9.0 / 5.0) + 32, FAHRENHEIT);
	else if (scale == CELSIUS)
	    return new Temperature((value * 9.0 / 5.0) + 32, FAHRENHEIT);
	else
	    return this;
    }

    private static Scanner scanner = new Scanner(System.in);

    /**
     * Read a temperature in from the terminal. Input must be in the format "(value) (s)" where (value) is a numeric value and where (s) is the scale. The scale is one of: C,c,F,f,K,k.
     * @return A new Temperature object with values specified from the command line.
     */
    static Temperature readTemp() {
	String input = scanner.nextLine();
	String[] parts = input.split(" ");
	if (parts.length == 0)
	    return null;

	float value;
	try {
	    value = Float.parseFloat(parts[0]);
	} catch (NumberFormatException e) {
	    return null;
	}

	char scale = parts[1].charAt(0);
	if (!isScaleValid(scale))
	    return null;

	return new Temperature(value, scale);
    }

    /**
     * Print this Temperature to the command line.
     */
    void print() {
	System.out.printf("%.3f %c", value, scale);
    }

    /**
     * Get a temperature with a raised value.
     * @param degrees The amount of degrees to add.
     * @return A new Temperature object with a raised value.
     */
    Temperature raise(float degrees) {
	return new Temperature(value + degrees, scale);
    }

    /**
     * Get a temperature with a lowered value.
     * @param degrees The amount of degrees to subtract.
     * @return A new Temperature object with a lowered value.
     */
    Temperature lower(float degrees) {
	return new Temperature(value - degrees, scale);
    }

    /**
     * Check if this temperature is equal to another.
     * @param temp A Temperature object to compare with.
     * @return True if this Temperature is equal to the other one. Scale does not matter.
     */
    boolean equals(Temperature temp) {
	return convertTemp(temp, scale).value == value;
    }

    /**
     * Check if this temperature is less than another.
     * @param temp A Temperature object to compare with.
     * @return True if this Temperature is less than to the other one. Scale does not matter.
     */
    boolean lessThan(Temperature temp) {
	return value < convertTemp(temp, scale).value;
    }

    /**
     * Convert a temperature to another scale.
     * @param temp A Temperature object to convert.
     * @param scale The scale to convert to.
     * @return A new Temperature object converted to a different scale, or the same object that was passed in if no conversion was necessary.
     */
    private static Temperature convertTemp(Temperature temp, char scale) {
	if (temp.scale != scale) {
	    if (scale == CELSIUS)
		return temp.toCelsius();
	    else if (scale == KELVIN)
		return temp.toKelvin();
	    else
		return temp.toFahrenheit();
	}
	return temp;
    }

    /**
     * Check if a character is a valid scale value.
     * @param scale The character to check.
     * @return True if the scale character is one of C,c,F,f,K,k; false otherwise.
     */
    private static boolean isScaleValid(char scale) {
	char upperCased = Character.toUpperCase(scale);
	return upperCased == KELVIN ||
	    upperCased == CELSIUS ||
	    upperCased == FAHRENHEIT;
    }
}
import java.util.Scanner;
import java.util.InputMismatchException;

/*
 * Driver for the Temperature type.
 * Author: David Reidsma
 * Date: 04/15/2020
 */
class TemperatureTester {
    public static void main(String[] args) {
	System.out.println("Temperature examples:");
	System.out.println("\t20.5 C");
	System.out.println("\t10 K");
	System.out.println("\t35.1 F");
	System.out.print("Enter a start temperature: ");
	Temperature start = Temperature.readTemp();
	while (start == null) {
	    System.out.print("Invalid input, try again: ");
	    start = Temperature.readTemp();
	}
	
	System.out.print("Enter a stop temperature: ");
	Temperature stop = Temperature.readTemp();
	while (stop == null) {
	    System.out.print("Invalid input, try again: ");
	    stop = Temperature.readTemp();
	}
        
	Scanner scanner = new Scanner(System.in);
	String stepString = "";
	float step = 0;
	boolean hasStep = false;
	int i = 0;
	while (!hasStep) {
	    if (i == 0)
		System.out.print("Enter a step amount of degrees (in the same scale as your start temperature): ");
	    else
		System.out.print("Invalid input, try again: ");
	    try {
		stepString = scanner.nextLine();
		step = Float.parseFloat(stepString);
		hasStep = true;
	    } catch (NumberFormatException e) {	}
	    i++;
	}
	scanner.close();

	if (start.equals(stop)) {
	    System.out.println("Start and stop temperatures are already equal.");
	    return;
	}

	Temperature current = start;
	while (true) {
	    if (start.lessThan(stop) != current.lessThan(stop) && !current.equals(stop))
		break;

	    current.toFahrenheit().print();
	    System.out.print("\t\t");
	    current.toCelsius().print();
	    System.out.print("\t\t");
	    current.toKelvin().print();
	    System.out.println();

	    if (start.lessThan(stop))
		current = current.raise(step);
	    else
		current = current.lower(step);
	}
    }
}
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/java[david@davidreidsma java]$ javac -deprecation *.java
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/java[david@davidreidsma java]$ java TemperatureTester
Temperature examples:
	20.5 C
	10 K
	35.1 F
Enter a start temperature: 0 F
Enter a stop temperature: 100 C
Enter a step amount of degrees (in the same scale as your start temperature): 2.5
0.000 F		-17.778 C		255.372 K
2.500 F		-16.389 C		256.761 K
5.000 F		-15.000 C		258.150 K
7.500 F		-13.611 C		259.539 K
10.000 F		-12.222 C		260.928 K
12.500 F		-10.833 C		262.317 K
15.000 F		-9.444 C		263.706 K
17.500 F		-8.056 C		265.094 K
20.000 F		-6.667 C		266.483 K
22.500 F		-5.278 C		267.872 K
25.000 F		-3.889 C		269.261 K
27.500 F		-2.500 C		270.650 K
30.000 F		-1.111 C		272.039 K
32.500 F		0.278 C		273.428 K
35.000 F		1.667 C		274.817 K
37.500 F		3.056 C		276.206 K
40.000 F		4.444 C		277.594 K
42.500 F		5.833 C		278.983 K
45.000 F		7.222 C		280.372 K
47.500 F		8.611 C		281.761 K
50.000 F		10.000 C		283.150 K
52.500 F		11.389 C		284.539 K
55.000 F		12.778 C		285.928 K
57.500 F		14.167 C		287.317 K
60.000 F		15.556 C		288.706 K
62.500 F		16.944 C		290.094 K
65.000 F		18.333 C		291.483 K
67.500 F		19.722 C		292.872 K
70.000 F		21.111 C		294.261 K
72.500 F		22.500 C		295.650 K
75.000 F		23.889 C		297.039 K
77.500 F		25.278 C		298.428 K
80.000 F		26.667 C		299.817 K
82.500 F		28.056 C		301.206 K
85.000 F		29.444 C		302.594 K
87.500 F		30.833 C		303.983 K
90.000 F		32.222 C		305.372 K
92.500 F		33.611 C		306.761 K
95.000 F		35.000 C		308.150 K
97.500 F		36.389 C		309.539 K
100.000 F		37.778 C		310.928 K
102.500 F		39.167 C		312.317 K
105.000 F		40.556 C		313.706 K
107.500 F		41.944 C		315.094 K
110.000 F		43.333 C		316.483 K
112.500 F		44.722 C		317.872 K
115.000 F		46.111 C		319.261 K
117.500 F		47.500 C		320.650 K
120.000 F		48.889 C		322.039 K
122.500 F		50.278 C		323.428 K
125.000 F		51.667 C		324.817 K
127.500 F		53.056 C		326.206 K
130.000 F		54.444 C		327.594 K
132.500 F		55.833 C		328.983 K
135.000 F		57.222 C		330.372 K
137.500 F		58.611 C		331.761 K
140.000 F		60.000 C		333.150 K
142.500 F		61.389 C		334.539 K
145.000 F		62.778 C		335.928 K
147.500 F		64.167 C		337.317 K
150.000 F		65.556 C		338.706 K
152.500 F		66.944 C		340.094 K
155.000 F		68.333 C		341.483 K
157.500 F		69.722 C		342.872 K
160.000 F		71.111 C		344.261 K
162.500 F		72.500 C		345.650 K
165.000 F		73.889 C		347.039 K
167.500 F		75.278 C		348.428 K
170.000 F		76.667 C		349.817 K
172.500 F		78.056 C		351.206 K
175.000 F		79.444 C		352.594 K
177.500 F		80.833 C		353.983 K
180.000 F		82.222 C		355.372 K
182.500 F		83.611 C		356.761 K
185.000 F		85.000 C		358.150 K
187.500 F		86.389 C		359.539 K
190.000 F		87.778 C		360.928 K
192.500 F		89.167 C		362.317 K
195.000 F		90.556 C		363.706 K
197.500 F		91.944 C		365.094 K
200.000 F		93.333 C		366.483 K
202.500 F		94.722 C		367.872 K
205.000 F		96.111 C		369.261 K
207.500 F		97.500 C		370.650 K
210.000 F		98.889 C		372.039 K
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/java[david@davidreidsma java]$ java TemperatureTester
Temperature examples:
	20.5 C
	10 K
	35.1 F
Enter a start temperature: 0 K
Enter a stop temperature: 212 F
Enter a step amount of degrees (in the same scale as your start temperature): 20.0
-459.670 F		-273.150 C		0.000 K
-423.670 F		-253.150 C		20.000 K
-387.670 F		-233.150 C		40.000 K
-351.670 F		-213.150 C		60.000 K
-315.670 F		-193.150 C		80.000 K
-279.670 F		-173.150 C		100.000 K
-243.670 F		-153.150 C		120.000 K
-207.670 F		-133.150 C		140.000 K
-171.670 F		-113.150 C		160.000 K
-135.670 F		-93.150 C		180.000 K
-99.670 F		-73.150 C		200.000 K
-63.670 F		-53.150 C		220.000 K
-27.670 F		-33.150 C		240.000 K
8.330 F		-13.150 C		260.000 K
44.330 F		6.850 C		280.000 K
80.330 F		26.850 C		300.000 K
116.330 F		46.850 C		320.000 K
152.330 F		66.850 C		340.000 K
188.330 F		86.850 C		360.000 K
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/java[david@davidreidsma java]$ cd ..
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08[david@davidreidsma proj08]$ exit

Script done on 2020-04-16 02:20:23-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2020-04-16 02:22:01-04:00 [TERM="xterm-kitty" TTY="/dev/pts/3" COLUMNS="63" LINES="25"]
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08[david@davidreidsma proj08]$ cd ruby
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/ruby[david@davidreidsma ruby]$ ls
temperature.rb  temperature_tester.rb
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/ruby[david@davidreidsma ruby]$ ruby te[K[K[K[K[K[K[Kcat temperature.rb[K[K[K_tester.rb temperature.rb
require './temperature'

# Driver for the Temperature class.
# Author: David Reidsma
# Date: 04/15/2020
def main
  puts "Temperature examples:"
  puts "\t20.5 C"
  puts "\t10 K"
  puts "\t35.1 F"
  print "Enter a start temperature: "
  start, error = Temperatures::Temperature.read_temp
  while error
    print "Invalid input, try again: "
    start, error = Temperatures::Temperature.read_temp
  end

  print "Enter a stop temperature: "
  stop, error = Temperatures::Temperature.read_temp
  while error
    print "Invalid input, try again: "
    stop, error = Temperatures::Temperature.read_temp
  end
  
  print "Enter a step amount of degrees (in the same scale as your start temperature): "
  step_string = gets.chomp
  step = 0.0
  while not Temperatures::Temperature.is_numeric(step_string)
    print "Invalid input, try again: "
    step_string = gets.chomp
  end
  step = step_string.to_f

  if start.equals(stop)
    puts("Start and stop temperatures are already equal.")
    return
  end
  
  current = start
  while true
    if start.less_than(stop) != current.less_than(stop) && !current.equals(stop)
      break
    end

    current.to_fahrenheit.print_temp
    print "\t\t"
    current.to_celsius.print_temp
    print "\t\t"
    current.to_kelvin.print_temp
    puts ""

    if start.less_than(stop)
      current = current.raise(step)
    else
      current = current.lower(step)
    end
  end
end

main
# This module's purpose is to contain the Temperature class.
# Author: David Reidsma
# Date: 04/15/2020
module Temperatures
  # This class represents a temperature at a given value and scale.
  class Temperature
    CELSIUS = "C"
    FAHRENHEIT = "F"
    KELVIN = "K"
    ABSOLUTE_ZERO = -273.15

    # Create a temperature with a specific value and scale.
    # @param [Float] value The numeric value.
    # @param [String] scale The scale. Valid options are: C,c,F,f,K,k
    def initialize(value, scale)
      if not Temperature.is_scale_valid(scale)
        puts "Invalid scale provided."
      end
      @value, @scale = value, scale.upcase
    end

    attr_accessor :value, :scale

    # Get a new Temperature that is equal to this one, but in Celsius.
    # @return A new Temperature.
    def to_celsius
      if @scale == KELVIN
        return Temperature.new(@value + ABSOLUTE_ZERO, CELSIUS)
      elsif @scale == FAHRENHEIT
        return Temperature.new((@value - 32) * 5.0 / 9.0, CELSIUS)
      else
        return self
      end
    end

    # Get a new Temperature that is equal to this one, but in Fahrenheit.
    # @return A new Temperature.
    def to_fahrenheit
      if @scale == KELVIN
        return Temperature.new(((@value + ABSOLUTE_ZERO) * 9.0 / 5.0) + 32, FAHRENHEIT)
      elsif @scale == CELSIUS
        return Temperature.new((@value * 9.0 / 5.0) + 32, FAHRENHEIT)
      else
        return self
      end
    end
    
    # Get a new Temperature that is equal to this one, but in Kelvin.
    # @return A new Temperature.
    def to_kelvin
      if @scale == CELSIUS
        return Temperature.new(@value - ABSOLUTE_ZERO, KELVIN)
      elsif @scale == FAHRENHEIT
        return Temperature.new((@value - 32) * 5.0 / 9.0 - ABSOLUTE_ZERO, KELVIN)
      else
        return self
      end
    end

    # Read a temperature in from the terminal. Input must be in the format "(value) (s)" where (value) is a numeric value and where (s) is the scale. The scale is one of: C,c,F,f,K,k.
    # @return A tuple containing [0] a new Temperature or nil if an error occured and [1] a boolean indicating [true] if an error occured or [false] if not.
    def self.read_temp
      input = gets.chomp
      parts = input.split(" ")
      if parts.length() != 2
        return nil, true
      end
      
      scale = parts[1][0]

      if not Temperature.is_scale_valid(scale) or not Temperature.is_numeric(parts[0])
        return nil, true
      end
      
      value = parts[0].to_f
      
      return Temperature.new(value, scale), false
    end

    # Print this Temperature to the command line.
    def print_temp
      print to_string
    end

    # @return A string representation of this Temperature.
    def to_string
      return ("%.3f" % @value).to_s.ljust(8) + " " + @scale
    end

    # Get a new Temperature with a raised value.
    # @param [Float] amount The amount to degrees to add.
    # @return A new Temperature object with a raised value.
    def raise(amount)
      return Temperature.new(@value + amount, scale)
    end

    # Get a new Temperature with a lowered value.
    # @param [Float] amount The amount of degrees to subtract.
    # @return A new Temperature object with a lowered value.
    def lower(amount)
      return Temperature.new(@value - amount, scale)
    end

    # Check if this Temperature is equal to another.
    # @param [Temperature] temp A Temperature object to compare with.
    # @return [true] if equal, [false] otherwise
    def equals(temp)
      return @value == Temperature.convert_temp(temp, @scale).value
    end

    # Check if this Temperature is less than to another.
    # @param [Temperature] temp A Temperature object to compare with.
    # @return [true] if less than, [false] otherwise
    def less_than(temp)
      return @value < Temperature.convert_temp(temp, @scale).value
    end

    # Convert a Temperature object to another scale.
    # @param [Temperature] temp A Temperature object.
    # @param [String] scale The scale to convert to.
    # @return A new Temperature object converted to a different scale, or the same object that was passed in if no conversion was necessary.
    def self.convert_temp(temp, scale)
      if temp.scale == scale
        return temp
      end

      if scale == CELSIUS
        return temp.to_celsius
      elsif scale == KELVIN
        return temp.to_kelvin
      else
        return temp.to_fahrenheit
      end
    end

    # Check if a string is a valid scale value.
    # @param [String] scale The string to check.
    # @return [true] if the scale string is one of C,c,F,f,K,k; [false] otherwise.
    def self.is_scale_valid(scale)
      upper_cased = scale.upcase
      return upper_cased == CELSIUS ||
        upper_cased == FAHRENHEIT ||
        upper_cased == KELVIN
    end

    # Check if a string is numeric.
    # Pulled nearly verbatim from: http://rosettacode.org/wiki/Determine_if_a_string_is_numeric#Ruby
    # @param [String] value The string to check.
    # @return [true] if numeric, [false] otherwise
    def self.is_numeric(value)
      begin
        Float(value)
      rescue
        false
      else
        true
      end
    end
  end
end
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/ruby[david@davidreidsma ruby]$ ruby temperature_tester.rb 
Temperature examples:
	20.5 C
	10 K
	35.1 F
Enter a start temperature: 0 F
Enter a stop temperature: 100 C
Enter a step amount of degrees (in the same scale as your start temperature): 2.5
0.000    F		-17.778  C		255.372  K
2.500    F		-16.389  C		256.761  K
5.000    F		-15.000  C		258.150  K
7.500    F		-13.611  C		259.539  K
10.000   F		-12.222  C		260.928  K
12.500   F		-10.833  C		262.317  K
15.000   F		-9.444   C		263.706  K
17.500   F		-8.056   C		265.094  K
20.000   F		-6.667   C		266.483  K
22.500   F		-5.278   C		267.872  K
25.000   F		-3.889   C		269.261  K
27.500   F		-2.500   C		270.650  K
30.000   F		-1.111   C		272.039  K
32.500   F		0.278    C		273.428  K
35.000   F		1.667    C		274.817  K
37.500   F		3.056    C		276.206  K
40.000   F		4.444    C		277.594  K
42.500   F		5.833    C		278.983  K
45.000   F		7.222    C		280.372  K
47.500   F		8.611    C		281.761  K
50.000   F		10.000   C		283.150  K
52.500   F		11.389   C		284.539  K
55.000   F		12.778   C		285.928  K
57.500   F		14.167   C		287.317  K
60.000   F		15.556   C		288.706  K
62.500   F		16.944   C		290.094  K
65.000   F		18.333   C		291.483  K
67.500   F		19.722   C		292.872  K
70.000   F		21.111   C		294.261  K
72.500   F		22.500   C		295.650  K
75.000   F		23.889   C		297.039  K
77.500   F		25.278   C		298.428  K
80.000   F		26.667   C		299.817  K
82.500   F		28.056   C		301.206  K
85.000   F		29.444   C		302.594  K
87.500   F		30.833   C		303.983  K
90.000   F		32.222   C		305.372  K
92.500   F		33.611   C		306.761  K
95.000   F		35.000   C		308.150  K
97.500   F		36.389   C		309.539  K
100.000  F		37.778   C		310.928  K
102.500  F		39.167   C		312.317  K
105.000  F		40.556   C		313.706  K
107.500  F		41.944   C		315.094  K
110.000  F		43.333   C		316.483  K
112.500  F		44.722   C		317.872  K
115.000  F		46.111   C		319.261  K
117.500  F		47.500   C		320.650  K
120.000  F		48.889   C		322.039  K
122.500  F		50.278   C		323.428  K
125.000  F		51.667   C		324.817  K
127.500  F		53.056   C		326.206  K
130.000  F		54.444   C		327.594  K
132.500  F		55.833   C		328.983  K
135.000  F		57.222   C		330.372  K
137.500  F		58.611   C		331.761  K
140.000  F		60.000   C		333.150  K
142.500  F		61.389   C		334.539  K
145.000  F		62.778   C		335.928  K
147.500  F		64.167   C		337.317  K
150.000  F		65.556   C		338.706  K
152.500  F		66.944   C		340.094  K
155.000  F		68.333   C		341.483  K
157.500  F		69.722   C		342.872  K
160.000  F		71.111   C		344.261  K
162.500  F		72.500   C		345.650  K
165.000  F		73.889   C		347.039  K
167.500  F		75.278   C		348.428  K
170.000  F		76.667   C		349.817  K
172.500  F		78.056   C		351.206  K
175.000  F		79.444   C		352.594  K
177.500  F		80.833   C		353.983  K
180.000  F		82.222   C		355.372  K
182.500  F		83.611   C		356.761  K
185.000  F		85.000   C		358.150  K
187.500  F		86.389   C		359.539  K
190.000  F		87.778   C		360.928  K
192.500  F		89.167   C		362.317  K
195.000  F		90.556   C		363.706  K
197.500  F		91.944   C		365.094  K
200.000  F		93.333   C		366.483  K
202.500  F		94.722   C		367.872  K
205.000  F		96.111   C		369.261  K
207.500  F		97.500   C		370.650  K
210.000  F		98.889   C		372.039  K
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/ruby[david@davidreidsma ruby]$ ruby temperature_tester.rb 
Temperature examples:
	20.5 C
	10 K
	35.1 F
Enter a start temperature: 0 K
Enter a stop temperature: 212 F
Enter a step amount of degrees (in the same scale as your start temperature): 20.0
-459.670 F		-273.150 C		0.000    K
-423.670 F		-253.150 C		20.000   K
-387.670 F		-233.150 C		40.000   K
-351.670 F		-213.150 C		60.000   K
-315.670 F		-193.150 C		80.000   K
-279.670 F		-173.150 C		100.000  K
-243.670 F		-153.150 C		120.000  K
-207.670 F		-133.150 C		140.000  K
-171.670 F		-113.150 C		160.000  K
-135.670 F		-93.150  C		180.000  K
-99.670  F		-73.150  C		200.000  K
-63.670  F		-53.150  C		220.000  K
-27.670  F		-33.150  C		240.000  K
8.330    F		-13.150  C		260.000  K
44.330   F		6.850    C		280.000  K
80.330   F		26.850   C		300.000  K
116.330  F		46.850   C		320.000  K
152.330  F		66.850   C		340.000  K
188.330  F		86.850   C		360.000  K
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08/ruby[david@davidreidsma ruby]$ cd ..
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj08[david@davidreidsma proj08]$ exit

Script done on 2020-04-16 02:22:35-04:00 [COMMAND_EXIT_CODE="0"]
