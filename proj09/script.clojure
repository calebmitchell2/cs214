Script started on 2020-04-22 19:45:38-04:00 [TERM="xterm-kitty" TTY="/dev/pts/0" COLUMNS="56" LINES="51"]
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09[david@davidreidsma proj09]$ cd clojure
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/clojure[david@davidreidsma clojure]$ ls src
listOps.clj   listTester.clj
listOps.clj~  listTester.clj~
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/clojure[david@davidreidsma clojure]$ cat src/listOps.clj src/li stTester.clj
;; listOps.clj is a Clojure "module" for list operations.
;;
;; Begun by: Prof. Adams, CS 214 at Calvin College.
;; Completed by: David Reidsma
;; Date: 04/22/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maxOf2() finds the maximum of two values.  
;; Receive: val1, val2, two values.  
;; PRE: val1 and val2 can be compared using >.
;; Return: the maximum of val1 and val2. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn maxOf2 [val1 val2]
  (if (> val1 val2)      ; if val1 > val2
    val1                 ;   return val1
    val2                 ; else return val2
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listMax() finds the maximum value in a list.
;; Receive: aList, a list of values.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the maximum value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn listMax [list]
  (if (list? list)
    (if (empty? list)
      nil
      (if (= (count list) 1)
        (first list)
        (maxOf2 (first list) (listMax (rest list)))))
    nil))

;; using Clojure's built-in max and apply functions
(defn listMax2 [aList]
  (if (list? aList)         ; if aList is a list:
    (if (empty? aList)      ;  if aList is empty:
      nil                   ;    nil
      (apply max aList))))  ;  else apply max to the items in aList

;; searchListRecur is a recursive function for finding the index of a value in a list.
;; Receive: list, a list of values.
;;          value, a value to search for.
;;          index, an integer increased in each repetition
;; Return: the index of the value in the list or -1
(defn searchListRecur [list value index]
  (if (empty? list)
    -1
    (if (= value (first list))
      index
      (recur (rest list) value (inc index)))))

;; searchList is a function for finding the index of a value in a list.
;; Receive: list, a list of values.
;;          value, a value to search for.
;; Return: the index of the value in the list or -1
(defn searchList [list value]
  (searchListRecur list value 0))
;; listTester.clj tests a function to search a list for its maximum value, and then tests a function to search a list for a value.
;;
;; Output: four lists, and 
;;          the results of calling maxList() and searchList() on them.
;;
;; Usage: clojure -m max
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: David Reidsma
;; Date: 04/22/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns listTester)

(load "listOps")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function -main tests functions listMax() and searchList().
;; Output: the results of testing listMax() and searchList()  on various lists.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ 
      list1 '(99 88 77 66 55)        ; max is first value
      list2 (list 55 66 77 88 99)    ; max is last value
      list3 (list 55 77 99 88 66)    ; max is middle value
      list4 (list 11 12 13 14 15)    ; does not contain 99 to test searchList
      emptyList '()                  ; list is empty
    ]

    (println)
    (println "list1: " list1)        ; print list1,
    (println "list2: " list2)        ;   list2,
    (println "list3: " list3)        ;   list3,
    (println "list4: " list4)        ;   list4,
    (println "empty: " emptyList)    ;   list3,
    (println)                        ;   and their maxima
    (println "The max value in list1 is: " (listMax list1))
    (println "The max value in list2 is: " (listMax list2))
    (println "The max value in list3 is: " (listMax list3))
    (println)
    (println "The max of an empty list is: " (listMax emptyList))
    (println)
    (println "Using listMax2...")
    (println "The max value in list1 is: " (listMax2 list1))
    (println "The max value in list2 is: " (listMax2 list2))
    (println "The max value in list3 is: " (listMax2 list3))
    (println)
    (println "The max of an empty list is: " (listMax2 emptyList))
    (println)
    (println "Testing searchList...")
    (println "The index of 99 in list1 is: " (searchList list1 99))
    (println "The index of 99 in list2 is: " (searchList list2 99))
    (println "The index of 99 in list3 is: " (searchList list3 99))
    (println "The index of 99 in list4 is: " (searchList list4 99))
    (println "The index of 99 in an empty list is: " (searchList emptyList 99))
    (println)
  )
)

]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/clojure[david@davidreidsma clojure]$ make
clojure -m listTester

list1:  (99 88 77 66 55)
list2:  (55 66 77 88 99)
list3:  (55 77 99 88 66)
list4:  (11 12 13 14 15)
empty:  ()

The max value in list1 is:  99
The max value in list2 is:  99
The max value in list3 is:  99

The max of an empty list is:  nil

Using listMax2...
The max value in list1 is:  99
The max value in list2 is:  99
The max value in list3 is:  99

The max of an empty list is:  nil

Testing searchList...
The index of 99 in list1 is:  0
The index of 99 in list2 is:  4
The index of 99 in list3 is:  2
The index of 99 in list4 is:  -1
The index of 99 in an empty list is:  -1

]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/clojure[david@davidreidsma clojure]$ cd ..
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09[david@davidreidsma proj09]$ exit

Script done on 2020-04-22 19:46:08-04:00 [COMMAND_EXIT_CODE="0"]
