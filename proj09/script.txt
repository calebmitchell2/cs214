Script started on 2020-04-22 19:42:12-04:00 [TERM="xterm-kitty" TTY="/dev/pts/0" COLUMNS="56" LINES="51"]
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09[david@davidreidsma proj09]$ cd ada
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/ada[david@davidreidsma ada]$ ls
list_package.adb   list_package.ali  list_tester.adb~
list_package.adb~  list_package.o    list_tester.ali
list_package.ads   [0m[01;32mlist_tester[0m       list_tester.o
list_package.ads~  list_tester.adb   Makefile
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/ada[david@davidreidsma ada]$ cat list_package.adb list_pack age.ads list_tester.adb
-- list_package.adb defines Ada linked list operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: David Reidsma
-- Date: 04/22/2020
-------------------------------------------------------

with Ada.Text_IO, Ada.Integer_Text_IO;
use Ada.Text_IO, Ada.Integer_Text_IO;

package body List_Package is

  -----------------------------------------------------
  -- Initialize a list                                -
  -- Receive: aList, a List.                          -
  -- Pre: aList is uninitialized.                     -
  -- Post: aList%itsFirst == aList%itsLast == NULL && -
  --        aList%itsLength == 0.                     -
  -----------------------------------------------------
  procedure Init(A_List : out List) is
  begin
    A_List.Its_First := null;
    A_List.Its_Last := null;
    A_List.Its_Length := 0;
  end Init;

  ------------------------------------------------
  -- Is a list empty?                            -
  -- Receive: aList, a List.                     -
  -- Return: true, iff aList contains no values. -
  ------------------------------------------------
  function Empty(A_List : in List) return Boolean is
  begin
    return A_List.Its_Length = 0;
  end Empty;

  -------------------------------------
  -- How many values are in a list?   -
  -- Receive: aList, a List.          -
  -- Return: aList%itsLength.         -
  -------------------------------------
  function Length(A_List : in List) return Integer is
  begin
    return A_List.Its_Length;
  end Length;

  ----------------------------------------
  -- Append a value to a list.           -
  -- Receive: aValue, an integer,        -
  -- Passback: aList, containing aValue. -
  ----------------------------------------
  procedure Append(A_Value : in Integer; A_List : in out List) is
    Temp_Ptr : constant Node_Ptr := new List_Node;
  begin
    Temp_Ptr.Its_Value := A_Value;
    Temp_Ptr.Its_Next := null;

    if A_List.Its_Length = 0 then
       A_List.Its_First := Temp_Ptr;
    else
       A_List.Its_Last.Its_Next := Temp_Ptr;
    end if;

    A_List.Its_Last := Temp_Ptr;

    A_List.Its_Length := A_List.Its_Length + 1;
  end Append;

  -------------------------------------
  -- Display the values in a list.    -
  -- Receive: aList, a List.          -
  -- Output: the values in aList.     -
  -------------------------------------
  procedure Put(A_List: in List) is
     Temp_Ptr: Node_Ptr := A_List.Its_First;
  begin
     while Temp_Ptr /= null loop
	Put(Temp_Ptr.Its_Value);
	Put(' ');
	Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;
  end Put;
  
  ---------------------------------------
  -- Find the maximum value in a list.  -
  -- Receive: aList, a List.            -
  -- Return: the maximum value in aList.-
  ---------------------------------------
  function Max(A_List: in List) return Integer is
     Max_Value: Integer := A_List.Its_First.Its_Value;
     Temp_Ptr: Node_Ptr := A_List.Its_First;
  begin
     while Temp_Ptr /= null loop
	if Temp_Ptr.Its_Value > Max_Value then
	   Max_Value := Temp_Ptr.Its_Value;
	end if;
	Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;
     return Max_Value;
  end Max;
  
  
   ------------------------------------------------------
   -- Search for an integer in a list.                  -
   -- Receive: A_List, a List.                          -
   --          Value, an Integer.                       -
   -- Return: the index of the value in the list or -1. -
   --                                                   -
   -- The index returned will be 1-based, not 0-based.  -
   ------------------------------------------------------
  function Search(A_List: in List; Value: in Integer) return Integer is
     Temp_Ptr: Node_Ptr := A_List.Its_First;
     Index: Integer := 1;
  begin
     while Temp_Ptr /= null loop
	if Temp_Ptr.Its_Value = Value then
	   return Index;
	end if;
	Index := Index + 1;
	Temp_Ptr := Temp_Ptr.Its_Next;
     end loop;
     return -1;
  end Search;
end List_Package;

-- list_package.ads declares an Ada linked list and its operations.
--
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: David Reidsma
-- Date: 04/22/2020
------------------------------------------------------------------

package List_Package is

   -- the list-type itself (public)
   type List is private;
   type Node_Ptr is private;

   -----------------------------------------------------
   -- Initialize a list                                -
   -- Receive: aList, a List.                          -
   -- Pre: aList is uninitialized.                     -
   -- Post: aList%itsFirst == aList%itsLast == NULL && -
   --        aList%itsLength == 0.                     -
   -----------------------------------------------------
   procedure Init(A_List: out List);


   ------------------------------------------------
   -- Is a list empty?                            -
   -- Receive: aList, a List.                     -
   -- Return: true, iff aList contains no values. -
   ------------------------------------------------
   function Empty(A_List: in List) return Boolean;

   -------------------------------------
   -- How many values are in a list?   -
   -- Receive: aList, a List.          -
   -- Return: aList%itsLength.         -
   -------------------------------------
   function Length(A_List : in List) return Integer;


   ----------------------------------------
   -- Append a value to a list.           -
   -- Receive: aValue, an integer,        -
   -- Passback: aList, containing aValue. -
   ----------------------------------------
   procedure Append(A_Value : in Integer; A_List: in out List);


   -------------------------------------
   -- Display the values in a list.    -
   -- Receive: aList, a List.          -
   -- Output: the values in aList.     -
   -------------------------------------
   procedure Put(A_List: in List);

   ---------------------------------------
   -- Find the maximum value in a list.  -
   -- Receive: aList, a List.            -
   -- Return: the maximum value in aList.-
   ---------------------------------------
   function Max(A_List: in List) return Integer;
   
   ------------------------------------------------------
   -- Search for an integer in a list.                  -
   -- Receive: A_List, a List.                          -
   --          Value, an Integer.                       -
   -- Return: the index of the value in the list or -1. -
   ------------------------------------------------------
   function Search(A_List: in List; Value: in Integer) return Integer;

private
   type List_Node;
   type Node_Ptr is access List_Node;
   type List_Node is
      record
	 Its_Value: Integer;
	 Its_Next: Node_Ptr;
      end record;
   
   type List is
      record
	 Its_First: Node_Ptr;
	 Its_Last: Node_Ptr;
	 Its_Length: Integer;
      end record;
end List_Package;
-- list_tester.adb finds the maximums of three lists of integers and looks for the value 99 in the lists.
-- 
-- Begun by: Dr. Adams, CS 214 at Calvin College.
-- Completed by: David Reidsma
-- Date: 04/22/2020
-------------------------------------------------- 
 
with Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
use Ada.Text_IO, Ada.Integer_Text_IO, List_Package; 
 
procedure List_Tester is 
                              -- define 3 lists 
   List1, List2, List3, List4 : List;
   -- Node: Node_Ptr;
 
begin 
  Init(List1);                -- initialize them 
  Init(List2); 
  Init(List3); 
  Init(List4);
 
  Append(99, List1);          -- 99, 88, 77, 66, 55 
  Append(88, List1);          -- max is first 
  Append(77, List1); 
  Append(66, List1); 
  Append(55, List1); 
 
  Append(55, List2);          -- 55, 66, 77, 88, 99 
  Append(66, List2);          -- max is last 
  Append(77, List2); 
  Append(88, List2); 
  Append(99, List2); 
 
  Append(55, List3);          -- 55, 77, 99, 88, 66 
  Append(77, List3);          -- max is in the middle 
  Append(99, List3); 
  Append(88, List3); 
  Append(66, List3);
  
  Append(11, List4);          -- 11, 12, 13, 14, 15
  Append(12, List4);          -- This list exists to test searching for a value that is not in this list (99).
  Append(13, List4);
  Append(14, List4);
  Append(15, List4);
 
  Put(List1); New_Line;       -- output the 3 lists 
  Put(List2); New_Line; 
  Put(list3); New_Line; 
                              -- display their maxima 
  Put("The maximum value in list 1 is ");  
  Put( Max(List1) ); 
  New_Line; 
  Put("The maximum value in list 2 is "); 
  Put( Max(List2) );
  New_Line; 
  Put("The maximum value in list 3 is ");
  Put( Max(List3) );
  New_Line; 
  
  -- This next line causes an error: 'invalid prefix in selected component "List3"
  -- Node := List3.Its_First;
  -- Put(Node.Its_Value);
  
  Put("The index of value 99 in list 1 is ");
  Put(Search(List1, 99));
  New_Line;
  Put("The index of value 99 in list 2 is ");
  Put(Search(List2, 99));
  New_Line;
  Put("The index of value 99 in list 3 is ");
  Put(Search(List3, 99));
  New_Line;
  Put("The index of value 99 in list 4 is ");
  Put(Search(List4, 99));
  New_Line;
end List_Tester;

]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/ada[david@davidreidsma ada]$ make
make: 'list_tester' is up to date.
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/ada[david@davidreidsma ada]$ ./list_tester 
         99          88          77          66          55 
         55          66          77          88          99 
         55          77          99          88          66 
The maximum value in list 1 is          99
The maximum value in list 2 is          99
The maximum value in list 3 is          99
The index of value 99 in list 1 is           1
The index of value 99 in list 2 is           5
The index of value 99 in list 3 is           3
The index of value 99 in list 4 is          -1
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/ada[david@davidreidsma ada]$ cd ..
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09[david@davidreidsma proj09]$ exit

Script done on 2020-04-22 19:42:46-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2020-04-22 19:45:38-04:00 [TERM="xterm-kitty" TTY="/dev/pts/0" COLUMNS="56" LINES="51"]
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09[david@davidreidsma proj09]$ cd clojure
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/clojure[david@davidreidsma clojure]$ ls src
listOps.clj   listTester.clj
listOps.clj~  listTester.clj~
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/clojure[david@davidreidsma clojure]$ cat src/listOps.clj src/li stTester.clj
;; listOps.clj is a Clojure "module" for list operations.
;;
;; Begun by: Prof. Adams, CS 214 at Calvin College.
;; Completed by: David Reidsma
;; Date: 04/22/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; maxOf2() finds the maximum of two values.  
;; Receive: val1, val2, two values.  
;; PRE: val1 and val2 can be compared using >.
;; Return: the maximum of val1 and val2. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn maxOf2 [val1 val2]
  (if (> val1 val2)      ; if val1 > val2
    val1                 ;   return val1
    val2                 ; else return val2
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; listMax() finds the maximum value in a list.
;; Receive: aList, a list of values.    
;; PRE: aList is a list 
;;      values in aList can be compared using >.
;; Return: the maximum value in aList.         
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn listMax [list]
  (if (list? list)
    (if (empty? list)
      nil
      (if (= (count list) 1)
        (first list)
        (maxOf2 (first list) (listMax (rest list)))))
    nil))

;; using Clojure's built-in max and apply functions
(defn listMax2 [aList]
  (if (list? aList)         ; if aList is a list:
    (if (empty? aList)      ;  if aList is empty:
      nil                   ;    nil
      (apply max aList))))  ;  else apply max to the items in aList

;; searchListRecur is a recursive function for finding the index of a value in a list.
;; Receive: list, a list of values.
;;          value, a value to search for.
;;          index, an integer increased in each repetition
;; Return: the index of the value in the list or -1
(defn searchListRecur [list value index]
  (if (empty? list)
    -1
    (if (= value (first list))
      index
      (recur (rest list) value (inc index)))))

;; searchList is a function for finding the index of a value in a list.
;; Receive: list, a list of values.
;;          value, a value to search for.
;; Return: the index of the value in the list or -1
(defn searchList [list value]
  (searchListRecur list value 0))
;; listTester.clj tests a function to search a list for its maximum value, and then tests a function to search a list for a value.
;;
;; Output: four lists, and 
;;          the results of calling maxList() and searchList() on them.
;;
;; Usage: clojure -m max
;;
;; Begun by: Dr. Adams, CS 214 at Calvin College.
;; Completed by: David Reidsma
;; Date: 04/22/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns listTester)

(load "listOps")                      ; load module

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function -main tests functions listMax() and searchList().
;; Output: the results of testing listMax() and searchList()  on various lists.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ 
      list1 '(99 88 77 66 55)        ; max is first value
      list2 (list 55 66 77 88 99)    ; max is last value
      list3 (list 55 77 99 88 66)    ; max is middle value
      list4 (list 11 12 13 14 15)    ; does not contain 99 to test searchList
      emptyList '()                  ; list is empty
    ]

    (println)
    (println "list1: " list1)        ; print list1,
    (println "list2: " list2)        ;   list2,
    (println "list3: " list3)        ;   list3,
    (println "list4: " list4)        ;   list4,
    (println "empty: " emptyList)    ;   list3,
    (println)                        ;   and their maxima
    (println "The max value in list1 is: " (listMax list1))
    (println "The max value in list2 is: " (listMax list2))
    (println "The max value in list3 is: " (listMax list3))
    (println)
    (println "The max of an empty list is: " (listMax emptyList))
    (println)
    (println "Using listMax2...")
    (println "The max value in list1 is: " (listMax2 list1))
    (println "The max value in list2 is: " (listMax2 list2))
    (println "The max value in list3 is: " (listMax2 list3))
    (println)
    (println "The max of an empty list is: " (listMax2 emptyList))
    (println)
    (println "Testing searchList...")
    (println "The index of 99 in list1 is: " (searchList list1 99))
    (println "The index of 99 in list2 is: " (searchList list2 99))
    (println "The index of 99 in list3 is: " (searchList list3 99))
    (println "The index of 99 in list4 is: " (searchList list4 99))
    (println "The index of 99 in an empty list is: " (searchList emptyList 99))
    (println)
  )
)

]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/clojure[david@davidreidsma clojure]$ make
clojure -m listTester

list1:  (99 88 77 66 55)
list2:  (55 66 77 88 99)
list3:  (55 77 99 88 66)
list4:  (11 12 13 14 15)
empty:  ()

The max value in list1 is:  99
The max value in list2 is:  99
The max value in list3 is:  99

The max of an empty list is:  nil

Using listMax2...
The max value in list1 is:  99
The max value in list2 is:  99
The max value in list3 is:  99

The max of an empty list is:  nil

Testing searchList...
The index of 99 in list1 is:  0
The index of 99 in list2 is:  4
The index of 99 in list3 is:  2
The index of 99 in list4 is:  -1
The index of 99 in an empty list is:  -1

]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/clojure[david@davidreidsma clojure]$ cd ..
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09[david@davidreidsma proj09]$ exit

Script done on 2020-04-22 19:46:08-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2020-04-22 19:46:12-04:00 [TERM="xterm-kitty" TTY="/dev/pts/0" COLUMNS="56" LINES="51"]
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09[david@davidreidsma proj09]$ cd java
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/java[david@davidreidsma java]$ ls
ListTester.class  ListTester.java~
ListTester.java   Makefile
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/java[david@davidreidsma java]$ cat ListTester.java
/* ListTester.java finds the maximum values in Java linked lists, and searches for values in them.
 *
 * Begun by: Dr. Adams, CS 214 at Calvin College.
 * Completed by: David Reidsma
 * Date: 04/22/2020
 */

import java.util.Collections;
import java.util.LinkedList;
import java.util.Iterator;

public class ListTester {

    public static void main(String [] args) {
	LinkedList<Integer> list1 = new LinkedList<Integer>(),
	                    list2 = new LinkedList<Integer>(),
	                    list3 = new LinkedList<Integer>(),
                  	    list4 = new LinkedList<Integer>();

	list1.add(99);    // 99, 88, 77, 66, 55
	list1.add(88);    // max is first
	list1.add(77);
	list1.add(66);  
	list1.add(55);

	list2.add(55);    // 55, 66, 77, 88, 99
	list2.add(66);    // max is last
	list2.add(77);  
	list2.add(88);  
	list2.add(99);  
  
	list3.add(55);    // 55, 77, 99, 88, 66
	list3.add(77);    // max is in the middle
	list3.add(99);  
	list3.add(88);  
	list3.add(66);

	list4.add(11);
	list4.add(12);
	list4.add(13);
	list4.add(14);
	list4.add(15);
  
	print(list1);
	print(list2);
	print(list3);
	print(list4);

	System.out.println("Max of list1: " + Collections.max(list1));
	System.out.println("Max of list2: " + Collections.max(list2));
	System.out.println("Max of list3: " + Collections.max(list3));
	System.out.println("Index of 99 in list1: " + search(list1, 99));
	System.out.println("Index of 99 in list2: " + search(list2, 99));
	System.out.println("Index of 99 in list3: " + search(list3, 99));
	System.out.println("Index of 99 in list4: " + search(list4, 99));
    }

    /**
     * Search for an item in a LinkedList containing integers.
     * @param list The list to search.
     * @param value The integer to search for.
     * @return The index of the value in the list, or -1.
     */
    static int search(LinkedList<Integer> list, int value) {
	int index = 0;
	Iterator<Integer> iterator = list.iterator();
	while (iterator.hasNext()) {
	    if (iterator.next() == value)
		return index;
	    index++;
	}
	return -1;
    }

    /** print() displays a LinkedList on the console.
     *
     * @param: list, a LinkedList<Integer>
     * 
     * Postcondition: the Integer values in list
     *                 have been displayed to System.out,
     *                 separated by spaces.
     */
    static void print(LinkedList<Integer> list) {
	Iterator<Integer> iterator = list.iterator();
	while (iterator.hasNext()) {
	    System.out.print(iterator.next() + " ");
	}
	System.out.println();
    }
}

]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/java[david@davidreidsma java]$ javac -deprecation ListTester .java
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/java[david@davidreidsma java]$ java ListTester
99 88 77 66 55 
55 66 77 88 99 
55 77 99 88 66 
11 12 13 14 15 
Max of list1: 99
Max of list2: 99
Max of list3: 99
Index of 99 in list1: 0
Index of 99 in list2: 4
Index of 99 in list3: 2
Index of 99 in list4: -1
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/java[david@davidreidsma java]$ cd ..
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09[david@davidreidsma proj09]$ exit

Script done on 2020-04-22 19:46:39-04:00 [COMMAND_EXIT_CODE="0"]
Script started on 2020-04-22 19:42:51-04:00 [TERM="xterm-kitty" TTY="/dev/pts/0" COLUMNS="56" LINES="51"]
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09[david@davidreidsma proj09]$ cd ruby
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/ruby[david@davidreidsma ruby]$ ls
List.rb  List.rb~  list_tester.rb  list_tester.rb~
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/ruby[david@davidreidsma ruby]$ cat List.rb list_tester.rb
# List.rb implements a linked list structure in Ruby.
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by: David Reidsma
# Date: 04/22/2020
#######################################################

require 'test/unit/assertions'
include Test::Unit::Assertions

class List

  # initialize a List to be empty
  # Postcondition: first == nil and last == nil and length == 0
  def initialize
    @first = nil
    @last = nil
    @length = 0
  end

  # create reader method for length
  attr_reader :length

  # Am I empty?
  # Return: length == 0
  def empty?
    @length == 0
  end
  
  # append a value to me
  # Receive: value, the item to be appended
  # Postcondition: my last item is value and
  #                 my length is one more than it was
  def append(value)
    newNode = Node.new(value, nil)

    if empty?
      @first = newNode
    else
      @last.next = newNode      
    end

    @last = newNode
    @length += 1
    self
  end

  # print my items
  # Postcondition: my items have been displayed to the screen
  def print
    temp = @first
    while !temp.nil?
      printf "#{temp.value} "
      temp = temp.next
    end
  end

  # find my maximum item
  # Return: my maximum item
  def max
    temp = @first
    max_value = @first.value
    while !temp.nil?
      if temp.value > max_value
        max_value = temp.value
      end
      temp = temp.next
    end
    return max_value
  end

  # Search for a value in this list.
  # Receive: value, the item to be searched for
  # Return: the index of the value in this list or -1.
  def search(value)
    temp = @first
    index = 0
    while !temp.nil?
      if temp.value == value
        return index
      end
      temp = temp.next
      index += 1
    end
    return -1
  end
    
  # Replace this line with a declaration for class Node
  #  (and its methods)
  class Node
    def initialize(item, link)
      @value = item
      @next = link
    end

    attr_reader :value
    attr_accessor :next
  end
end

# list_tester.rb tests a Ruby linked list.
#
# Begun by: Dr. Adams for CS 214 at Calvin College.
# Completed by: David Reidsma
# Date: 04/22/2020

require './List'

list1 = List.new
list2 = List.new
list3 = List.new
list4 = List.new

list1.append(99).append(88).append(77).append(66).append(55)
list2.append(55).append(66).append(77).append(88).append(99)
list3.append(55).append(77).append(99).append(88).append(66)
list4.append(11).append(12).append(13).append(14).append(15)

list1.print 
puts
puts "Maximum of list1: #{list1.max}"
puts "Index of 99 in list1: #{list1.search(99)}"

list2.print 
puts
puts "Maximum of list2: #{list2.max}"
puts "Index of 99 in list2: #{list2.search(99)}"

list3.print 
puts
puts "Maximum of list3: #{list3.max}"
puts "Index of 99 in list3: #{list3.search(99)}"

list4.print
puts
puts "Index of 99 in list4: #{list4.search(99)}"
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/ruby[david@davidreidsma ruby]$ ruby list_tester[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K/opt/bin/[K[K[K[Kruby2.6/bin/ruby [K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Kruby listTester.rb
[1mTraceback[m (most recent call last):
ruby: [1mNo such file or directory -- listTester.rb ([1;4mLoadError[m[1m)[m
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/ruby[david@davidreidsma ruby]$ ruby list_tester.rb
[1mTraceback[m (most recent call last):
	5: from list_tester.rb:7:in `<main>'
	4: from /usr/lib/ruby/2.7.0/rubygems/core_ext/kernel_require.rb:92:in `require'
	3: from /usr/lib/ruby/2.7.0/rubygems/core_ext/kernel_require.rb:92:in `require'
	2: from /home/david/Programming/Calvin/cs214/proj09/ruby/List.rb:8:in `<top (required)>'
	1: from /usr/lib/ruby/2.7.0/rubygems/core_ext/kernel_require.rb:92:in `require'
/usr/lib/ruby/2.7.0/rubygems/core_ext/kernel_require.rb:92:in `require': [1mcannot load such file -- test/unit/assertions ([1;4mLoadError[m[1m)[m
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/ruby[david@davidreidsma ruby]$ /opt/ruby2.6/bin/ruby list_te ster.rb
99 88 77 66 55 
Maximum of list1: 99
Index of 99 in list1: 0
55 66 77 88 99 
Maximum of list2: 99
Index of 99 in list2: 4
55 77 99 88 66 
Maximum of list3: 99
Index of 99 in list3: 2
11 12 13 14 15 
Index of 99 in list4: -1
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09/ruby[david@davidreidsma ruby]$ cd ..
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj09[david@davidreidsma proj09]$ exit

Script done on 2020-04-22 19:45:30-04:00 [COMMAND_EXIT_CODE="0"]
