]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07[david@davidreidsma proj07]$ cd ada
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/ada[david@davidreidsma ada]$ cat name_tester.adb
-- namer.adb "test-drives" the Name type.
-- Begun by: Prof. Adams, CS 214 at Calvin College.
-- Completed by:  David Reidsma
-- Date:          04/08/2020
----------------------------------------------

with Ada.Text_IO; use Ada.Text_IO;

procedure name_tester is

  NAME_SIZE : constant integer := 8;
  Chars_Read : Natural;

  type Name is
    record
      First, Middle, Last : String(1..NAME_SIZE);
    end record;

  A_Name : Name ;

  ----------------------------------------------
  -- Init initializes a Name variable          -
  -- Receive: The_Name, the Name variable;     -
  --          First, the first name;           -
  --          Middle, the middle name;         -
  --          Last, the last name.             -
  -- Return: theName, its fields set to First, -
  --               Middle, and Last.           -
  ----------------------------------------------
  procedure Init(The_Name : out Name; First, Middle, Last : in String) is
  begin
    The_Name.First := First;
    The_Name.Middle := Middle;
    The_Name.Last := Last;
  end Init;

  ----------------------------------------------
  -- Get_First(Name) retrieves Name.First      -
  -- Receive: The_Name, a Name.                -
  -- PRE: The_Name has been initialized.       -
  -- Return: The_Name.First.                   -
  ----------------------------------------------
  function Get_First(The_Name : in Name) return String is
  begin
    return The_Name.First;
  end Get_First;

  ----------------------------------------------
  -- Get_Middle(Name) retrieves Name.Middle    -
  -- Receive: The_Name, a Name.                -
  -- PRE: The_Name has been initialized.       -
  -- Return: The_Name.Middle.                  -
  ----------------------------------------------
  function Get_Middle(The_Name : in Name) return String is
  begin
    return The_Name.Middle;
  end Get_Middle;

  ----------------------------------------------
  -- Get_Last(Name) retrieves Name.Last        -
  -- Receive: The_Name, a Name.                -
  -- PRE: The_Name has been initialized.       -
  -- Return: The_Name.Last.                    -
  ----------------------------------------------
  function Get_Last(The_Name : in Name) return String is
  begin
    return The_Name.Last;
  end Get_Last;

  ----------------------------------------------------
  -- Get_Full_Name(Name) retrieves Name as a String  -
  -- Receive: The_Name, a Name.                      -
  -- PRE: The_Name has been initialized.             -
  -- Return: a String representation of The_Name     -
  ----------------------------------------------------
  function Get_Full_Name(The_Name : in Name) return String is
  begin
    return The_Name.First & " " & The_Name.Middle & " " & The_Name.Last;
  end Get_Full_Name;

  ----------------------------------------------
  -- Put(Name) displays a Name value.          -
  -- PRE: The_Name has been initialized.       -
  -- Receive: The_Name, a Name.                -
  -- Output: The_Name, to the screen.          -
  ----------------------------------------------
  procedure Put(The_Name : in Name) is
  begin
    Put(Get_Full_Name(The_Name));
  end Put;
  
  ---------------------------------------------------------------
  -- Set_First(Name, String) sets the first name of a Name.     -
  -- PRE: The_Name has been initialized.                        -
  -- Receive: The_Name, a Name.                                 -
  --          New_First, a String containing the new first name -
  ---------------------------------------------------------------
  procedure Set_First(The_Name : out Name; New_First : in String) is
  begin
    The_Name.First := New_First;
  end Set_First;
  
  -----------------------------------------------------------------
  -- Set_Middle(Name, String) sets the middle name of a Name.     -
  -- PRE: The_Name has been initialized.                          -
  -- Receive: The_Name, a Name.                                   -
  --          New_Middle, a String containing the new middle name -
  -----------------------------------------------------------------
  procedure Set_Middle(The_Name : out Name; New_Middle : in String) is
  begin
    The_Name.Middle := New_Middle;
  end Set_Middle;
  
  ---------------------------------------------------------------
  -- Set_Last(Name, String) sets the last name of a Name.       -
  -- PRE: The_Name has been initialized.                        -
  -- Receive: The_Name, a Name.                                 -
  --          New_Last, a String containing the new last name   -
  ---------------------------------------------------------------
  procedure Set_Last(The_Name : out Name; New_Last : in String) is
  begin
    The_Name.Last := New_Last;
  end Set_Last;
  
  -------------------------------------------------------------------------------
  -- LFMI(Name) returns the name in format "(last), (first) (middle initial)".  -
  -- PRE: The_Name has been initialized.                                        -
  -- Receive: The_Name, a Name.                                                 -
  -- Output: A string containing "Last, First M"                                -
  -------------------------------------------------------------------------------
  function LFMI(The_Name : in Name) return String is
  begin
    return The_Name.Last & ", " & The_Name.First & ' ' & The_Name.Middle(The_Name.Middle'First);
  end LFMI;
  
  --------------------------------------------------------------------------------
  -- Read_Name reads a first, middle and last name from the console into a Name. -
  -- PRE: The_Name has been initialized.                                         -
  -- Receive: The_Name, a Name.                                                  -
  --------------------------------------------------------------------------------
  procedure Read_Name(The_Name : out Name) is
  begin
    The_Name.First := (others => ' ');
    The_Name.Middle := (others => ' ');
    The_Name.Last := (others => ' ');
    Get_Line(The_Name.First, Chars_Read);
    Get_Line(The_Name.Middle, Chars_Read);
    Get_Line(The_Name.Last, Chars_Read);
  end Read_Name;

begin
  Init(A_Name, "John    ", "Paul    ", "Jones   ");

  pragma Assert(Get_First(A_Name) = "John    ", "Get_First failed");
  pragma Assert(Get_Middle(A_Name) = "Paul    ", "Get_Middle failed");
  pragma Assert(Get_Last(A_Name) = "Jones   ", "Get_Last failed");
  Put(A_Name); New_line;
  pragma Assert(Get_Full_Name(A_Name) = "John     Paul     Jones   ", "Get_Full_Name failed");
  Set_First(A_Name, "Finn    ");
  pragma Assert(Get_First(A_Name) = "Finn    ", "Set_First failed");
  Set_Middle(A_Name, "The     ");
  pragma Assert(Get_Middle(A_Name) = "The    ", "Set_Middle failed");
  Set_Last(A_Name, "Human   ");
  pragma Assert(Get_Last(A_Name) = "Human    ", "Set_Last failed");
  pragma Assert(LFMI(A_Name) = "Human   , Finn    T", "LMFI failed!");
  
  Put("All tests passed!"); New_line;
  
  Put("Enter a first, middle and last name, pressing enter after each:"); New_Line;
  Read_Name(A_Name);
  Put(A_Name);
end name_tester;
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/ada[david@davidreidsma ada]$ gnatmake name_tester.adb
gnatmake: "name_tester" up to date.
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/ada[david@davidreidsma ada]$ ./name_tester 
John     Paul     Jones   
All tests passed!
Enter a first, middle and last name, pressing enter after each:
David
Anthony
Reidsma
David    Anthony  Reidsma 
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/ada[david@davidreidsma ada]$ cd ..


]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07[david@davidreidsma proj07]$ cd clojure
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/clojure[david@davidreidsma clojure]$ cat src/nameTester.clj 
;;;; nameTester.clj creates and tests a clojure Name type.
;;;;
;;;; Output: results of testing Name functions.
;;;;
;;;; Usage: clojure -m nameTester
;;;;
;;;; Begun by: Dr. Adams, CS 214 at Calvin College.
;;;; Completed by:  David Reidsma
;;;; Date:          03/20/2020
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ns nameTester)   ; program name

;;; define a Clojure record named Name 
;;; (which compiles to a Java class).

(defrecord Name [first middle last])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; make-name constructs a Name from three strings. 
;;; Receive: first, middle and last, three strings.
;;; Return: the Name (first middle last). 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn make-name [first middle last]
  (->Name first middle last))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; get-first() extracts the first name of a Name object.
;;; Receive: name, a Name.
;;; Return: the firstName string in name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn get-first [^Name name]
  (:first name))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; get-middle() extracts the middle name of a name object.
;;; Receive: name, a Name. 
;;; Return: the middle string in name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn get-middle [^Name name]
  (:middle name))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; get-last() extracts the last name of a name object.
;;; Receive: name, a Name. 
;;; Return: the last string in name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn get-last [^Name name]
  (:last name))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; set-first sets the first name to something else.
;;; Receive: name, a Name.
;;;          first, a String
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn set-first [^Name name first]
  (->Name first (:middle name) (:last name)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; set-middle sets the middle name to something else.
;;; Receive: name, a Name.
;;;          middle, a String
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn set-middle [^Name name middle]
  (->Name (:first name) middle (:last name)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; set-last sets the last name to something else.
;;; Receive: name, a Name.
;;;          last, a String
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn set-last [^Name name last]
  (->Name (:first name) (:middle name) last))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; to-string() returns a full name in F-M-L order. 
;;; Receive: name, a Name. 
;;; Return: first, middle, last,
;;;           separated by spaces. 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn to-string [^Name name]
  (str (:first name) " " (:middle name) " " (:last name)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; print-name() displays a name object.
;;; Receive: name, a Name.
;;; Output: the strings in name.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn print-name [^Name name]
  (let [full-name (to-string name)]
    (do
      (print full-name)
      (to-string name))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; lfmi returns the name in format "(last), (first) (middle initial)"
;;; Receive: name, a Name.
;;; Return: "(last), (first) (middle initial)"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn lfmi [^Name name]
  (str (:last name) ", " (:first name) " " (first (:middle name))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; read-name reads a first, middle, and last name from the console and returns a Name.
;;; Return: a Name populated with user-inputted values.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn read-name []
  (let [first (read)
        middle (read)
        last (read)]
    (make-name first middle last)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; A simple driver to test our Name functions. 
;;; Output: the result of testing our Name functions.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn -main []
  (let
    [ 
      first1 "John" middle1 "Paul" last1 "Jones" full1 "John Paul Jones"
      first2 "Jane" middle2 "Penelope" last2 "Jones" full2 "Jane Penelope Jones"
      first3 "Jinx" middle3 "Joy" last3 "Jones" full3 "Jinx Joy Jones"
                                               ; 3 ways to construct an object:
      name1 (make-name first1 middle1 last1)  ; -using our "make-" constructor
      name2 (->Name first2 middle2 last2) ; -invoking constructor directly
                                              ; -mapping field-names to values
      name3 (map->Name {:last last3 :first first3 :middle middle3})
    ]
    ;; ----- SECTION 1 -----
    (println)
    (print name1) (println)
    (assert (= (get-first name1) first1) "get-first(1) failed")
    (assert (= (get-middle name1) middle1) "get-middle(1) failed")
    (assert (= (get-last name1) last1) "get-last(1) failed")
    (assert (= (to-string name1) full1) "to-string(1) failed")
    (print-name name1) (println)
    ;; ----- SECTION 2 -----
    (println)
    (print name2) (println)
    (assert (= (get-first name2) first2) "get-first(2) failed")
    (assert (= (get-middle name2) middle2) "get-middle(2) failed")
    (assert (= (get-last name2) last2) "get-last(2) failed")
    (assert (= (to-string name2) full2) "to-string(2) failed")
    (print-name name2) (println)
    ;; ----- SECTION 3 -----
    (println)
    (print name3) (println)
    (assert (= (get-first name3) first3) "get-first(3) failed")
    (assert (= (get-middle name3) middle3) "get-middle(3) failed")
    (assert (= (get-last name3) last3) "get-last(3) failed")
    (assert (= (to-string name3) full3) "to-string(3) failed")
    (print-name name3) (println)
    ;; ----- SECTION 4 -----
    (let [first4 "Finn"
          middle4 "The"
          last4 "Human"
          name1a (set-first name1 first4)
          name1b (set-middle name1 middle4)
          name1c (set-last name1 last4)]
      (assert (= (get-first name1a) first4) "set-first failed")
      (assert (= (get-middle name1b) middle4) "set-middle failed")
      (assert (= (get-last name1c) last4) "set-last failed"))

    (assert (= (lfmi name1) (str last1 ", " first1 " " (first middle1))) "lfmi failed")

    (println "\nAll tests passed!\n")

    (println "Enter a first, middle, and last name, pressing enter after each:")
    (let [name4 (read-name)]
      (print-name name4))
      (println)
  )
)
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/clojure[david@davidreidsma clojure]$ clojure -m nameTester

#nameTester.Name{:first John, :middle Paul, :last Jones}
John Paul Jones

#nameTester.Name{:first Jane, :middle Penelope, :last Jones}
Jane Penelope Jones

#nameTester.Name{:first Jinx, :middle Joy, :last Jones}
Jinx Joy Jones

All tests passed!

Enter a first, middle, and last name, pressing enter after each:
David
Anthony
Reidsma
David Anthony Reidsma
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/clojure[david@davidreidsma clojure]$ cd ..


]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07[david@davidreidsma proj07]$ cd java
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/java[david@davidreidsma java]$ java[K[K[K[Kcat NameTester.java
/* NameTester.java is a 'driver' to test class Name.
 * Begun by: Prof. Adams, for CS 214 at Calvin College.
 * Student: David Reidsma
 * Date:    04/08/2020
 ************************************************************/

import java.util.Scanner;

public class NameTester {
    public static void main(String[] args) {
        Name aName = new Name("John", "Paul", "Jones");
        
        assert aName.getFirst().equals("John") ;
        assert aName.getMiddle().equals("Paul") ;
        assert aName.getLast().equals("Jones") ;
        
        System.out.println(aName);
        assert aName.toString().equals("John Paul Jones");

	aName.setFirst("Finn");
	assert aName.getFirst().equals("Finn");
	aName.setMiddle("The");
	assert aName.getMiddle().equals("The");
	aName.setLast("Human");
	assert aName.getLast().equals("Human");

	assert aName.LFMI().equals("Human, Finn T");
	
        System.out.println("All tests passed!");
	System.out.println("Enter a first, middle, and last name, pressing enter after each:");
	aName.readName();
	System.out.println(aName);
    }
}

class Name {
    private String first, middle, last;

    /**
     * Creates a Name object
     * @param first The first name
     * @param middle The middle name
     * @param last The last name
     */
    Name(String first, String middle, String last) {
        this.first = first;
        this.middle = middle;
        this.last = last;
    }

    /**
     * @return The first name
     */
    String getFirst() { return first; }
    
    /**
     * @return The middle name
     */
    String getMiddle() { return middle; }

    /**
     * @return The last name
     */
    String getLast() { return last; }

    /**
     * Sets the first name.
     */
    void setFirst(String first) { this.first = first; }

    /**
     * Sets the middle name.
     */
    void setMiddle(String middle) { this.middle = middle; }

    /**
     * Sets the last name.
     */
    void setLast(String last) { this.last = last; }

    /**
     * Get the full name in format "(last), (first) (middle initial)"
     * @returns "(last), (first) (middle initial)"
     */
    String LFMI() {
	    return last + ", " + first + ' ' + middle.charAt(0);
    }
    
    private Scanner scanner = new Scanner(System.in);

    /**
     * Read in a first, middle and last name from the console.
     */
    void readName() {
        first = scanner.nextLine();
	    middle = scanner.nextLine();
	    last = scanner.nextLine();
    }
    
    @Override
    public String toString() {
        return first + " " + middle + " " + last;
    }
}
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/java[david@davidreidsma java]$ javac -deprecation NameTester.java
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/java[david@davidreidsma java]$ java NameTester.java[K[K[K[K[K
John Paul Jones
All tests passed!
Enter a first, middle, and last name, pressing enter after each:
David
Anthony
Reidsma
David Anthony Reidsma
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/java[david@davidreidsma java]$ cd ..


]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07[david@davidreidsma proj07]$ cd ruby
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/ruby[david@davidreidsma ruby]$ cat NameTester.rb 
# NameTester.rb tests class Name and its operations
#
# Begun by: Dr. Adams, for CS 214 at Calvin College.
# Completed by:   David Reidsma
# Date:           04/08/2020
####################################################

require 'test/unit/assertions'   # needed for assert
include Test::Unit::Assertions

class Name
   # Initializes a name variable
   # Input: first, a first name
   # Input: middle, a middle name
   # Input: last, a last name
   def initialize(first, middle, last)
      @first, @middle, @last = first, middle, last
   end

   # Returns the full name as a string
   # Precondition: initialize has been called.
   def fullName
      return @first + ' ' + @middle + ' ' + @last
   end

   # Print the full name and return it
   # Precondition: initialize has been called
   def print
      name = fullName
      puts name
      return name
   end

   # Returns the full name in format "(last), (first) (middle initial)"
   # Precondition: initialize has been called
   def lfmi
      return @last + ", " + @first + ' ' + @middle[0]
   end

   # Reads a first, middle, and last name from the console.
   def readName
     @first = gets.chomp
     @middle = gets.chomp
     @last = gets.chomp
   end

   attr_accessor :first, :middle, :last
end

def testName
   name = Name.new("John", "Paul", "Jones")

   assert name.first == "John", "first getter failed"
   assert name.middle == "Paul", "middle getter failed"
   assert name.last == "Jones", "last getter failed"
   
   assert name.fullName == "John Paul Jones", "fullName failed"
   assert name.print == "John Paul Jones", "print failed"
   name.first = "Finn"
   assert name.first == "Finn", "first setter failed"
   name.middle = "The"
   assert name.middle == "The", "middle setter failed"
   name.last = "Human"
   assert name.last == "Human", "last setter failed"
   assert name.lfmi == "Human, Finn T", "lfmi failed"
   
   print "All tests passed!\n"
   print "Enter a first, middle, and last name, pressing enter after each:\n"
   name.readName
   puts name.fullName
end

testName
]0;david@davidreidsma:~/Programming/Calvin/cs214/proj07/ruby[david@davidreidsma ruby]$ /opt/ruby2.6/bin/ruby-2.6 NameTester.rb 
John Paul Jones
All tests passed!
Enter a first, middle, and last name, pressing enter after each:
David
Anthony
Reidsma
David Anthony Reidsma
